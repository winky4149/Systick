
Systick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080040d0  080040d0  000140d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800418c  0800418c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800418c  0800418c  0001418c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004194  08004194  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004194  08004194  00014194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004198  08004198  00014198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800419c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  0800420c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  0800420c  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1e1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c55  00000000  00000000  0002d281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  0002eed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  0002fb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172f7  00000000  00000000  00030710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de3b  00000000  00000000  00047a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f390  00000000  00000000  00055842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4bd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be4  00000000  00000000  000e4c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080040b8 	.word	0x080040b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080040b8 	.word	0x080040b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <callbackSystick>:
int taskB;
//스위치용 변수
uint32_t bufferSwitch;//스위치의 상태를 1ms마다 저장
uint8_t stateSwitch;//스위치의 상태를 결정
void callbackSystick()//1ms마다 호출
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	//스위치 레터링 제거
	bufferSwitch=bufferSwitch<<1;
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <callbackSystick+0x6c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	4a18      	ldr	r2, [pc, #96]	; (80005f0 <callbackSystick+0x6c>)
 8000590:	6013      	str	r3, [r2, #0]
	bufferSwitch+=HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin);
 8000592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000596:	4817      	ldr	r0, [pc, #92]	; (80005f4 <callbackSystick+0x70>)
 8000598:	f000 feca 	bl	8001330 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <callbackSystick+0x6c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4413      	add	r3, r2
 80005a6:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <callbackSystick+0x6c>)
 80005a8:	6013      	str	r3, [r2, #0]
	if(bufferSwitch==0)stateSwitch=0;
 80005aa:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <callbackSystick+0x6c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d102      	bne.n	80005b8 <callbackSystick+0x34>
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <callbackSystick+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	if(bufferSwitch==0xffffffff)stateSwitch=1;
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <callbackSystick+0x6c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c0:	d102      	bne.n	80005c8 <callbackSystick+0x44>
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <callbackSystick+0x74>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	701a      	strb	r2, [r3, #0]
	//동작 주기 카운트
	if(taskA>0) taskA--;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <callbackSystick+0x78>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	dd04      	ble.n	80005da <callbackSystick+0x56>
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <callbackSystick+0x78>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3b01      	subs	r3, #1
 80005d6:	4a09      	ldr	r2, [pc, #36]	; (80005fc <callbackSystick+0x78>)
 80005d8:	6013      	str	r3, [r2, #0]
	if(taskB>0) taskB--;
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <callbackSystick+0x7c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	dd04      	ble.n	80005ec <callbackSystick+0x68>
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <callbackSystick+0x7c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	4a05      	ldr	r2, [pc, #20]	; (8000600 <callbackSystick+0x7c>)
 80005ea:	6013      	str	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000120 	.word	0x20000120
 80005f4:	40020800 	.word	0x40020800
 80005f8:	20000124 	.word	0x20000124
 80005fc:	20000118 	.word	0x20000118
 8000600:	2000011c 	.word	0x2000011c

08000604 <enableBuzzer>:
void enableBuzzer(){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000608:	2100      	movs	r1, #0
 800060a:	4802      	ldr	r0, [pc, #8]	; (8000614 <enableBuzzer+0x10>)
 800060c:	f001 fba8 	bl	8001d60 <HAL_TIM_PWM_Start>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	2000008c 	.word	0x2000008c

08000618 <disableBuzzer>:
void disableBuzzer(){
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800061c:	2100      	movs	r1, #0
 800061e:	4802      	ldr	r0, [pc, #8]	; (8000628 <disableBuzzer+0x10>)
 8000620:	f001 fc4e 	bl	8001ec0 <HAL_TIM_PWM_Stop>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000008c 	.word	0x2000008c

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fba1 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f863 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f000 f98b 	bl	8000954 <MX_GPIO_Init>
  MX_TIM1_Init();
 800063e:	f000 f8bd 	bl	80007bc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000642:	f000 f95d 	bl	8000900 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
int count=0;
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	static int oldSwitch, curSwitch;
  	curSwitch=stateSwitch;
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <main+0xb8>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <main+0xbc>)
 8000652:	601a      	str	r2, [r3, #0]

  	if(oldSwitch!=curSwitch)
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <main+0xc0>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <main+0xbc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	d00e      	beq.n	800067e <main+0x52>
  	{
  		if(curSwitch==0)//switch ON
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <main+0xbc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d106      	bne.n	8000676 <main+0x4a>
  		{
  			count++;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3301      	adds	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
  			printf("count=%d\n",count);
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	481f      	ldr	r0, [pc, #124]	; (80006f0 <main+0xc4>)
 8000672:	f002 fd93 	bl	800319c <iprintf>
  		}
  		else//switch OFF
  		{

  		}
  		oldSwitch=curSwitch;
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <main+0xbc>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <main+0xc0>)
 800067c:	6013      	str	r3, [r2, #0]
  	}
  	//task A
  	if(taskA==0)
 800067e:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <main+0xc8>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d10d      	bne.n	80006a2 <main+0x76>
  	{
  		taskA=1300;//taskA의 실행주기를 ms단위로 기록
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <main+0xc8>)
 8000688:	f240 5214 	movw	r2, #1300	; 0x514
 800068c:	601a      	str	r2, [r3, #0]
  		if(count>0)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b00      	cmp	r3, #0
 8000692:	dd06      	ble.n	80006a2 <main+0x76>
  		{
  			count--;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3b01      	subs	r3, #1
 8000698:	607b      	str	r3, [r7, #4]
  			printf("count=%d\n",count);
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	4814      	ldr	r0, [pc, #80]	; (80006f0 <main+0xc4>)
 800069e:	f002 fd7d 	bl	800319c <iprintf>
  		}
  	}
  	//task B
  	if(taskB==0)
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <main+0xcc>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d1cf      	bne.n	800064a <main+0x1e>
  	{
  		taskB=100;//taskB의 실행주기를 ms단위로 기록
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <main+0xcc>)
 80006ac:	2264      	movs	r2, #100	; 0x64
 80006ae:	601a      	str	r2, [r3, #0]
  		static _Bool flagStateBuzzer;
  		flagStateBuzzer ^=1;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <main+0xd0>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	f083 0301 	eor.w	r3, r3, #1
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	bf14      	ite	ne
 80006be:	2301      	movne	r3, #1
 80006c0:	2300      	moveq	r3, #0
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <main+0xd0>)
 80006c6:	701a      	strb	r2, [r3, #0]
  		flagStateBuzzer==0 ? enableBuzzer():disableBuzzer();
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <main+0xd0>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	f083 0301 	eor.w	r3, r3, #1
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d002      	beq.n	80006dc <main+0xb0>
 80006d6:	f7ff ff95 	bl	8000604 <enableBuzzer>
 80006da:	e7b6      	b.n	800064a <main+0x1e>
 80006dc:	f7ff ff9c 	bl	8000618 <disableBuzzer>
  {
 80006e0:	e7b3      	b.n	800064a <main+0x1e>
 80006e2:	bf00      	nop
 80006e4:	20000124 	.word	0x20000124
 80006e8:	20000128 	.word	0x20000128
 80006ec:	2000012c 	.word	0x2000012c
 80006f0:	080040d0 	.word	0x080040d0
 80006f4:	20000118 	.word	0x20000118
 80006f8:	2000011c 	.word	0x2000011c
 80006fc:	20000130 	.word	0x20000130

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2230      	movs	r2, #48	; 0x30
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f002 fd3c 	bl	800318c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <SystemClock_Config+0xb4>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <SystemClock_Config+0xb4>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <SystemClock_Config+0xb4>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <SystemClock_Config+0xb8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <SystemClock_Config+0xb8>)
 800074a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <SystemClock_Config+0xb8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000768:	2300      	movs	r3, #0
 800076a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fdf5 	bl	8001360 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800077c:	f000 f926 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f001 f858 	bl	8001850 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007a6:	f000 f911 	bl	80009cc <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3750      	adds	r7, #80	; 0x50
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b096      	sub	sp, #88	; 0x58
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2220      	movs	r2, #32
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 fcc9 	bl	800318c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007fa:	4b3f      	ldr	r3, [pc, #252]	; (80008f8 <MX_TIM1_Init+0x13c>)
 80007fc:	4a3f      	ldr	r2, [pc, #252]	; (80008fc <MX_TIM1_Init+0x140>)
 80007fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000800:	4b3d      	ldr	r3, [pc, #244]	; (80008f8 <MX_TIM1_Init+0x13c>)
 8000802:	220f      	movs	r2, #15
 8000804:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	4b3c      	ldr	r3, [pc, #240]	; (80008f8 <MX_TIM1_Init+0x13c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800080c:	4b3a      	ldr	r3, [pc, #232]	; (80008f8 <MX_TIM1_Init+0x13c>)
 800080e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000812:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000814:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <MX_TIM1_Init+0x13c>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800081a:	4b37      	ldr	r3, [pc, #220]	; (80008f8 <MX_TIM1_Init+0x13c>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000820:	4b35      	ldr	r3, [pc, #212]	; (80008f8 <MX_TIM1_Init+0x13c>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000826:	4834      	ldr	r0, [pc, #208]	; (80008f8 <MX_TIM1_Init+0x13c>)
 8000828:	f001 f9f2 	bl	8001c10 <HAL_TIM_Base_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000832:	f000 f8cb 	bl	80009cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800083c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000840:	4619      	mov	r1, r3
 8000842:	482d      	ldr	r0, [pc, #180]	; (80008f8 <MX_TIM1_Init+0x13c>)
 8000844:	f001 fc62 	bl	800210c <HAL_TIM_ConfigClockSource>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800084e:	f000 f8bd 	bl	80009cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000852:	4829      	ldr	r0, [pc, #164]	; (80008f8 <MX_TIM1_Init+0x13c>)
 8000854:	f001 fa2b 	bl	8001cae <HAL_TIM_PWM_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800085e:	f000 f8b5 	bl	80009cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000862:	2300      	movs	r3, #0
 8000864:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800086a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800086e:	4619      	mov	r1, r3
 8000870:	4821      	ldr	r0, [pc, #132]	; (80008f8 <MX_TIM1_Init+0x13c>)
 8000872:	f001 ffdf 	bl	8002834 <HAL_TIMEx_MasterConfigSynchronization>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800087c:	f000 f8a6 	bl	80009cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000880:	2360      	movs	r3, #96	; 0x60
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 8000884:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088a:	2300      	movs	r3, #0
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800088e:	2300      	movs	r3, #0
 8000890:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	2200      	movs	r2, #0
 80008a4:	4619      	mov	r1, r3
 80008a6:	4814      	ldr	r0, [pc, #80]	; (80008f8 <MX_TIM1_Init+0x13c>)
 80008a8:	f001 fb6e 	bl	8001f88 <HAL_TIM_PWM_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80008b2:	f000 f88b 	bl	80009cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	4807      	ldr	r0, [pc, #28]	; (80008f8 <MX_TIM1_Init+0x13c>)
 80008da:	f002 f819 	bl	8002910 <HAL_TIMEx_ConfigBreakDeadTime>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80008e4:	f000 f872 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008e8:	4803      	ldr	r0, [pc, #12]	; (80008f8 <MX_TIM1_Init+0x13c>)
 80008ea:	f000 f8bf 	bl	8000a6c <HAL_TIM_MspPostInit>

}
 80008ee:	bf00      	nop
 80008f0:	3758      	adds	r7, #88	; 0x58
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000008c 	.word	0x2000008c
 80008fc:	40010000 	.word	0x40010000

08000900 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USART1_UART_Init+0x4c>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <MX_USART1_UART_Init+0x50>)
 8000908:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_USART1_UART_Init+0x4c>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USART1_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USART1_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USART1_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_USART1_UART_Init+0x4c>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USART1_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_USART1_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_USART1_UART_Init+0x4c>)
 8000938:	f002 f83c 	bl	80029b4 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000942:	f000 f843 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200000d4 	.word	0x200000d4
 8000950:	40011000 	.word	0x40011000

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_GPIO_Init+0x70>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <MX_GPIO_Init+0x70>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_GPIO_Init+0x70>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_GPIO_Init+0x70>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <MX_GPIO_Init+0x70>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_GPIO_Init+0x70>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 80009a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	4619      	mov	r1, r3
 80009b6:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_GPIO_Init+0x74>)
 80009b8:	f000 fb36 	bl	8001028 <HAL_GPIO_Init>

}
 80009bc:	bf00      	nop
 80009be:	3720      	adds	r7, #32
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020800 	.word	0x40020800

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <Error_Handler+0x8>
	...

080009d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <HAL_MspInit+0x4c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <HAL_MspInit+0x4c>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800

08000a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <HAL_TIM_Base_MspInit+0x3c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d10d      	bne.n	8000a56 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <HAL_TIM_Base_MspInit+0x40>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <HAL_TIM_Base_MspInit+0x40>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <HAL_TIM_Base_MspInit+0x40>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40010000 	.word	0x40010000
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <HAL_TIM_MspPostInit+0x68>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d11e      	bne.n	8000acc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <HAL_TIM_MspPostInit+0x6c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <HAL_TIM_MspPostInit+0x6c>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_TIM_MspPostInit+0x6c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <HAL_TIM_MspPostInit+0x70>)
 8000ac8:	f000 faae 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000acc:	bf00      	nop
 8000ace:	3720      	adds	r7, #32
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40010000 	.word	0x40010000
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020000 	.word	0x40020000

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <HAL_UART_MspInit+0x84>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d12c      	bne.n	8000b5c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b0c:	f043 0310 	orr.w	r3, r3, #16
 8000b10:	6453      	str	r3, [r2, #68]	; 0x44
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	f003 0310 	and.w	r3, r3, #16
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <HAL_UART_MspInit+0x8c>)
 8000b58:	f000 fa66 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	; 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40011000 	.word	0x40011000
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
callbackSystick();
 8000bbc:	f7ff fce2 	bl	8000584 <callbackSystick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 f92c 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e00a      	b.n	8000bf0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bda:	f3af 8000 	nop.w
 8000bde:	4601      	mov	r1, r0
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	60ba      	str	r2, [r7, #8]
 8000be6:	b2ca      	uxtb	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf0      	blt.n	8000bda <_read+0x12>
  }

  return len;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <_isatty>:

int _isatty(int file)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f002 fa4c 	bl	8003138 <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20020000 	.word	0x20020000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	20000134 	.word	0x20000134
 8000cd4:	20000150 	.word	0x20000150

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <_write>:
	result = rxBuffer[rxBufferGp++];
	rxBufferGp %= rxBufferMax;
	return result;
}

int _write(int file, char *p, int len) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, p, len, 1);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	68b9      	ldr	r1, [r7, #8]
 8000d10:	4803      	ldr	r0, [pc, #12]	; (8000d20 <_write+0x24>)
 8000d12:	f001 fe9c 	bl	8002a4e <HAL_UART_Transmit>
	return len;
 8000d16:	687b      	ldr	r3, [r7, #4]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200000d4 	.word	0x200000d4

08000d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d28:	480d      	ldr	r0, [pc, #52]	; (8000d60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2a:	490e      	ldr	r1, [pc, #56]	; (8000d64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d2c:	4a0e      	ldr	r2, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d40:	4c0b      	ldr	r4, [pc, #44]	; (8000d70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d4e:	f7ff ffc3 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d52:	f002 f9f7 	bl	8003144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d56:	f7ff fc69 	bl	800062c <main>
  bx  lr    
 8000d5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d68:	0800419c 	.word	0x0800419c
  ldr r2, =_sbss
 8000d6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d70:	2000014c 	.word	0x2000014c

08000d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <HAL_Init+0x40>)
 8000d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <HAL_Init+0x40>)
 8000d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_Init+0x40>)
 8000d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da0:	2003      	movs	r0, #3
 8000da2:	f000 f90d 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da6:	200f      	movs	r0, #15
 8000da8:	f000 f808 	bl	8000dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dac:	f7ff fe14 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023c00 	.word	0x40023c00

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x54>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x58>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f917 	bl	800100e <HAL_SYSTICK_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00e      	b.n	8000e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	d80a      	bhi.n	8000e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df0:	2200      	movs	r2, #0
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f000 f8ed 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dfc:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <HAL_InitTick+0x5c>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e000      	b.n	8000e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000000 	.word	0x20000000
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000004 	.word	0x20000004

08000e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x20>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x24>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_IncTick+0x24>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	20000138 	.word	0x20000138

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000138 	.word	0x20000138

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f7ff ff8e 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff47 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff5c 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff8e 	bl	8000f14 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffb0 	bl	8000f7c <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	e159      	b.n	80012f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	429a      	cmp	r2, r3
 800105e:	f040 8148 	bne.w	80012f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d005      	beq.n	800107a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001076:	2b02      	cmp	r3, #2
 8001078:	d130      	bne.n	80010dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b0:	2201      	movs	r2, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	f003 0201 	and.w	r2, r3, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d017      	beq.n	8001118 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d123      	bne.n	800116c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	08da      	lsrs	r2, r3, #3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3208      	adds	r2, #8
 800112c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	220f      	movs	r2, #15
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	69b9      	ldr	r1, [r7, #24]
 8001168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0203 	and.w	r2, r3, #3
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80a2 	beq.w	80012f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b57      	ldr	r3, [pc, #348]	; (8001310 <HAL_GPIO_Init+0x2e8>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a56      	ldr	r2, [pc, #344]	; (8001310 <HAL_GPIO_Init+0x2e8>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b54      	ldr	r3, [pc, #336]	; (8001310 <HAL_GPIO_Init+0x2e8>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ca:	4a52      	ldr	r2, [pc, #328]	; (8001314 <HAL_GPIO_Init+0x2ec>)
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3302      	adds	r3, #2
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a49      	ldr	r2, [pc, #292]	; (8001318 <HAL_GPIO_Init+0x2f0>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d019      	beq.n	800122a <HAL_GPIO_Init+0x202>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a48      	ldr	r2, [pc, #288]	; (800131c <HAL_GPIO_Init+0x2f4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d013      	beq.n	8001226 <HAL_GPIO_Init+0x1fe>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a47      	ldr	r2, [pc, #284]	; (8001320 <HAL_GPIO_Init+0x2f8>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d00d      	beq.n	8001222 <HAL_GPIO_Init+0x1fa>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a46      	ldr	r2, [pc, #280]	; (8001324 <HAL_GPIO_Init+0x2fc>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d007      	beq.n	800121e <HAL_GPIO_Init+0x1f6>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a45      	ldr	r2, [pc, #276]	; (8001328 <HAL_GPIO_Init+0x300>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d101      	bne.n	800121a <HAL_GPIO_Init+0x1f2>
 8001216:	2304      	movs	r3, #4
 8001218:	e008      	b.n	800122c <HAL_GPIO_Init+0x204>
 800121a:	2307      	movs	r3, #7
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x204>
 800121e:	2303      	movs	r3, #3
 8001220:	e004      	b.n	800122c <HAL_GPIO_Init+0x204>
 8001222:	2302      	movs	r3, #2
 8001224:	e002      	b.n	800122c <HAL_GPIO_Init+0x204>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x204>
 800122a:	2300      	movs	r3, #0
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	f002 0203 	and.w	r2, r2, #3
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	4093      	lsls	r3, r2
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800123c:	4935      	ldr	r1, [pc, #212]	; (8001314 <HAL_GPIO_Init+0x2ec>)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	3302      	adds	r3, #2
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124a:	4b38      	ldr	r3, [pc, #224]	; (800132c <HAL_GPIO_Init+0x304>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800126e:	4a2f      	ldr	r2, [pc, #188]	; (800132c <HAL_GPIO_Init+0x304>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001274:	4b2d      	ldr	r3, [pc, #180]	; (800132c <HAL_GPIO_Init+0x304>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001298:	4a24      	ldr	r2, [pc, #144]	; (800132c <HAL_GPIO_Init+0x304>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800129e:	4b23      	ldr	r3, [pc, #140]	; (800132c <HAL_GPIO_Init+0x304>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c2:	4a1a      	ldr	r2, [pc, #104]	; (800132c <HAL_GPIO_Init+0x304>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_GPIO_Init+0x304>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ec:	4a0f      	ldr	r2, [pc, #60]	; (800132c <HAL_GPIO_Init+0x304>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3301      	adds	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	f67f aea2 	bls.w	8001044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3724      	adds	r7, #36	; 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40013800 	.word	0x40013800
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400
 8001320:	40020800 	.word	0x40020800
 8001324:	40020c00 	.word	0x40020c00
 8001328:	40021000 	.word	0x40021000
 800132c:	40013c00 	.word	0x40013c00

08001330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691a      	ldr	r2, [r3, #16]
 8001340:	887b      	ldrh	r3, [r7, #2]
 8001342:	4013      	ands	r3, r2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001348:	2301      	movs	r3, #1
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	e001      	b.n	8001352 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e267      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d075      	beq.n	800146a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800137e:	4b88      	ldr	r3, [pc, #544]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b04      	cmp	r3, #4
 8001388:	d00c      	beq.n	80013a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800138a:	4b85      	ldr	r3, [pc, #532]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001392:	2b08      	cmp	r3, #8
 8001394:	d112      	bne.n	80013bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001396:	4b82      	ldr	r3, [pc, #520]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013a2:	d10b      	bne.n	80013bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a4:	4b7e      	ldr	r3, [pc, #504]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d05b      	beq.n	8001468 <HAL_RCC_OscConfig+0x108>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d157      	bne.n	8001468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e242      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c4:	d106      	bne.n	80013d4 <HAL_RCC_OscConfig+0x74>
 80013c6:	4b76      	ldr	r3, [pc, #472]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a75      	ldr	r2, [pc, #468]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e01d      	b.n	8001410 <HAL_RCC_OscConfig+0xb0>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013dc:	d10c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x98>
 80013de:	4b70      	ldr	r3, [pc, #448]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a6f      	ldr	r2, [pc, #444]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	4b6d      	ldr	r3, [pc, #436]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a6c      	ldr	r2, [pc, #432]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e00b      	b.n	8001410 <HAL_RCC_OscConfig+0xb0>
 80013f8:	4b69      	ldr	r3, [pc, #420]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a68      	ldr	r2, [pc, #416]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 80013fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b66      	ldr	r3, [pc, #408]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a65      	ldr	r2, [pc, #404]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 800140a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d013      	beq.n	8001440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fd14 	bl	8000e44 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001420:	f7ff fd10 	bl	8000e44 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	; 0x64
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e207      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	4b5b      	ldr	r3, [pc, #364]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0xc0>
 800143e:	e014      	b.n	800146a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fd00 	bl	8000e44 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fcfc 	bl	8000e44 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e1f3      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145a:	4b51      	ldr	r3, [pc, #324]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0xe8>
 8001466:	e000      	b.n	800146a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d063      	beq.n	800153e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001476:	4b4a      	ldr	r3, [pc, #296]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 030c 	and.w	r3, r3, #12
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00b      	beq.n	800149a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001482:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800148a:	2b08      	cmp	r3, #8
 800148c:	d11c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800148e:	4b44      	ldr	r3, [pc, #272]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d116      	bne.n	80014c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149a:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d005      	beq.n	80014b2 <HAL_RCC_OscConfig+0x152>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d001      	beq.n	80014b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e1c7      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4937      	ldr	r1, [pc, #220]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c6:	e03a      	b.n	800153e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d020      	beq.n	8001512 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d0:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <HAL_RCC_OscConfig+0x244>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d6:	f7ff fcb5 	bl	8000e44 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014de:	f7ff fcb1 	bl	8000e44 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e1a8      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fc:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4925      	ldr	r1, [pc, #148]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 800150c:	4313      	orrs	r3, r2
 800150e:	600b      	str	r3, [r1, #0]
 8001510:	e015      	b.n	800153e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001512:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <HAL_RCC_OscConfig+0x244>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff fc94 	bl	8000e44 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001520:	f7ff fc90 	bl	8000e44 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e187      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001532:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d036      	beq.n	80015b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d016      	beq.n	8001580 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_RCC_OscConfig+0x248>)
 8001554:	2201      	movs	r2, #1
 8001556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001558:	f7ff fc74 	bl	8000e44 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001560:	f7ff fc70 	bl	8000e44 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e167      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_RCC_OscConfig+0x240>)
 8001574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x200>
 800157e:	e01b      	b.n	80015b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_RCC_OscConfig+0x248>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001586:	f7ff fc5d 	bl	8000e44 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158c:	e00e      	b.n	80015ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800158e:	f7ff fc59 	bl	8000e44 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d907      	bls.n	80015ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e150      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
 80015a0:	40023800 	.word	0x40023800
 80015a4:	42470000 	.word	0x42470000
 80015a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	4b88      	ldr	r3, [pc, #544]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 80015ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1ea      	bne.n	800158e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 8097 	beq.w	80016f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ca:	4b81      	ldr	r3, [pc, #516]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10f      	bne.n	80015f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	4b7d      	ldr	r3, [pc, #500]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a7c      	ldr	r2, [pc, #496]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b7a      	ldr	r3, [pc, #488]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f2:	2301      	movs	r3, #1
 80015f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f6:	4b77      	ldr	r3, [pc, #476]	; (80017d4 <HAL_RCC_OscConfig+0x474>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d118      	bne.n	8001634 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001602:	4b74      	ldr	r3, [pc, #464]	; (80017d4 <HAL_RCC_OscConfig+0x474>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a73      	ldr	r2, [pc, #460]	; (80017d4 <HAL_RCC_OscConfig+0x474>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160e:	f7ff fc19 	bl	8000e44 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001616:	f7ff fc15 	bl	8000e44 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e10c      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	4b6a      	ldr	r3, [pc, #424]	; (80017d4 <HAL_RCC_OscConfig+0x474>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d106      	bne.n	800164a <HAL_RCC_OscConfig+0x2ea>
 800163c:	4b64      	ldr	r3, [pc, #400]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 800163e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001640:	4a63      	ldr	r2, [pc, #396]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6713      	str	r3, [r2, #112]	; 0x70
 8001648:	e01c      	b.n	8001684 <HAL_RCC_OscConfig+0x324>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b05      	cmp	r3, #5
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0x30c>
 8001652:	4b5f      	ldr	r3, [pc, #380]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001656:	4a5e      	ldr	r2, [pc, #376]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6713      	str	r3, [r2, #112]	; 0x70
 800165e:	4b5c      	ldr	r3, [pc, #368]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	4a5b      	ldr	r2, [pc, #364]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6713      	str	r3, [r2, #112]	; 0x70
 800166a:	e00b      	b.n	8001684 <HAL_RCC_OscConfig+0x324>
 800166c:	4b58      	ldr	r3, [pc, #352]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 800166e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001670:	4a57      	ldr	r2, [pc, #348]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	6713      	str	r3, [r2, #112]	; 0x70
 8001678:	4b55      	ldr	r3, [pc, #340]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	4a54      	ldr	r2, [pc, #336]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 800167e:	f023 0304 	bic.w	r3, r3, #4
 8001682:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d015      	beq.n	80016b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff fbda 	bl	8000e44 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001692:	e00a      	b.n	80016aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001694:	f7ff fbd6 	bl	8000e44 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e0cb      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016aa:	4b49      	ldr	r3, [pc, #292]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0ee      	beq.n	8001694 <HAL_RCC_OscConfig+0x334>
 80016b6:	e014      	b.n	80016e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff fbc4 	bl	8000e44 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016be:	e00a      	b.n	80016d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c0:	f7ff fbc0 	bl	8000e44 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e0b5      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d6:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 80016d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1ee      	bne.n	80016c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016e2:	7dfb      	ldrb	r3, [r7, #23]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d105      	bne.n	80016f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e8:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	4a38      	ldr	r2, [pc, #224]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 80016ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80a1 	beq.w	8001840 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016fe:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	2b08      	cmp	r3, #8
 8001708:	d05c      	beq.n	80017c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d141      	bne.n	8001796 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001712:	4b31      	ldr	r3, [pc, #196]	; (80017d8 <HAL_RCC_OscConfig+0x478>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fb94 	bl	8000e44 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001720:	f7ff fb90 	bl	8000e44 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e087      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001732:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69da      	ldr	r2, [r3, #28]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	019b      	lsls	r3, r3, #6
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001754:	085b      	lsrs	r3, r3, #1
 8001756:	3b01      	subs	r3, #1
 8001758:	041b      	lsls	r3, r3, #16
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	061b      	lsls	r3, r3, #24
 8001762:	491b      	ldr	r1, [pc, #108]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_RCC_OscConfig+0x478>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff fb69 	bl	8000e44 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001776:	f7ff fb65 	bl	8000e44 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e05c      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x416>
 8001794:	e054      	b.n	8001840 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <HAL_RCC_OscConfig+0x478>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fb52 	bl	8000e44 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff fb4e 	bl	8000e44 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e045      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_RCC_OscConfig+0x470>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x444>
 80017c2:	e03d      	b.n	8001840 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d107      	bne.n	80017dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e038      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40007000 	.word	0x40007000
 80017d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <HAL_RCC_OscConfig+0x4ec>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d028      	beq.n	800183c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d121      	bne.n	800183c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001802:	429a      	cmp	r2, r3
 8001804:	d11a      	bne.n	800183c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800180c:	4013      	ands	r3, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001812:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001814:	4293      	cmp	r3, r2
 8001816:	d111      	bne.n	800183c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001822:	085b      	lsrs	r3, r3, #1
 8001824:	3b01      	subs	r3, #1
 8001826:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001828:	429a      	cmp	r2, r3
 800182a:	d107      	bne.n	800183c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800

08001850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0cc      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001864:	4b68      	ldr	r3, [pc, #416]	; (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d90c      	bls.n	800188c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b65      	ldr	r3, [pc, #404]	; (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b63      	ldr	r3, [pc, #396]	; (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0b8      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d020      	beq.n	80018da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a4:	4b59      	ldr	r3, [pc, #356]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	4a58      	ldr	r2, [pc, #352]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018bc:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4a52      	ldr	r2, [pc, #328]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c8:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	494d      	ldr	r1, [pc, #308]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d044      	beq.n	8001970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d119      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e07f      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d003      	beq.n	800190e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800190a:	2b03      	cmp	r3, #3
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190e:	4b3f      	ldr	r3, [pc, #252]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e06f      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191e:	4b3b      	ldr	r3, [pc, #236]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e067      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192e:	4b37      	ldr	r3, [pc, #220]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f023 0203 	bic.w	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4934      	ldr	r1, [pc, #208]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	4313      	orrs	r3, r2
 800193e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001940:	f7ff fa80 	bl	8000e44 <HAL_GetTick>
 8001944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001946:	e00a      	b.n	800195e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001948:	f7ff fa7c 	bl	8000e44 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	; 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e04f      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 020c 	and.w	r2, r3, #12
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	429a      	cmp	r2, r3
 800196e:	d1eb      	bne.n	8001948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001970:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d20c      	bcs.n	8001998 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001986:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_RCC_ClockConfig+0x1b8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e032      	b.n	80019fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d008      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a4:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4916      	ldr	r1, [pc, #88]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d009      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	490e      	ldr	r1, [pc, #56]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019d6:	f000 f821 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80019da:	4602      	mov	r2, r0
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	490a      	ldr	r1, [pc, #40]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 80019e8:	5ccb      	ldrb	r3, [r1, r3]
 80019ea:	fa22 f303 	lsr.w	r3, r2, r3
 80019ee:	4a09      	ldr	r2, [pc, #36]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff f9e0 	bl	8000dbc <HAL_InitTick>

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023c00 	.word	0x40023c00
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	080040dc 	.word	0x080040dc
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a20:	b090      	sub	sp, #64	; 0x40
 8001a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	637b      	str	r3, [r7, #52]	; 0x34
 8001a28:	2300      	movs	r3, #0
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a34:	4b59      	ldr	r3, [pc, #356]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d00d      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x40>
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	f200 80a1 	bhi.w	8001b88 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x34>
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d003      	beq.n	8001a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a4e:	e09b      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a50:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a52:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001a54:	e09b      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a56:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a5a:	e098      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a5c:	4b4f      	ldr	r3, [pc, #316]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a66:	4b4d      	ldr	r3, [pc, #308]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d028      	beq.n	8001ac4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a72:	4b4a      	ldr	r3, [pc, #296]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	099b      	lsrs	r3, r3, #6
 8001a78:	2200      	movs	r2, #0
 8001a7a:	623b      	str	r3, [r7, #32]
 8001a7c:	627a      	str	r2, [r7, #36]	; 0x24
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a84:	2100      	movs	r1, #0
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a88:	fb03 f201 	mul.w	r2, r3, r1
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	fb00 f303 	mul.w	r3, r0, r3
 8001a92:	4413      	add	r3, r2
 8001a94:	4a43      	ldr	r2, [pc, #268]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a96:	fba0 1202 	umull	r1, r2, r0, r2
 8001a9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a9c:	460a      	mov	r2, r1
 8001a9e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aa2:	4413      	add	r3, r2
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	61fa      	str	r2, [r7, #28]
 8001aae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ab2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ab6:	f7fe fbe3 	bl	8000280 <__aeabi_uldivmod>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4613      	mov	r3, r2
 8001ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ac2:	e053      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac4:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	099b      	lsrs	r3, r3, #6
 8001aca:	2200      	movs	r2, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	617a      	str	r2, [r7, #20]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ad6:	f04f 0b00 	mov.w	fp, #0
 8001ada:	4652      	mov	r2, sl
 8001adc:	465b      	mov	r3, fp
 8001ade:	f04f 0000 	mov.w	r0, #0
 8001ae2:	f04f 0100 	mov.w	r1, #0
 8001ae6:	0159      	lsls	r1, r3, #5
 8001ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aec:	0150      	lsls	r0, r2, #5
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	ebb2 080a 	subs.w	r8, r2, sl
 8001af6:	eb63 090b 	sbc.w	r9, r3, fp
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b0e:	ebb2 0408 	subs.w	r4, r2, r8
 8001b12:	eb63 0509 	sbc.w	r5, r3, r9
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	00eb      	lsls	r3, r5, #3
 8001b20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b24:	00e2      	lsls	r2, r4, #3
 8001b26:	4614      	mov	r4, r2
 8001b28:	461d      	mov	r5, r3
 8001b2a:	eb14 030a 	adds.w	r3, r4, sl
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	eb45 030b 	adc.w	r3, r5, fp
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b42:	4629      	mov	r1, r5
 8001b44:	028b      	lsls	r3, r1, #10
 8001b46:	4621      	mov	r1, r4
 8001b48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b4c:	4621      	mov	r1, r4
 8001b4e:	028a      	lsls	r2, r1, #10
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b56:	2200      	movs	r2, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	60fa      	str	r2, [r7, #12]
 8001b5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b60:	f7fe fb8e 	bl	8000280 <__aeabi_uldivmod>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4613      	mov	r3, r2
 8001b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	3301      	adds	r3, #1
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001b7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b86:	e002      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b8a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3740      	adds	r7, #64	; 0x40
 8001b94:	46bd      	mov	sp, r7
 8001b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	00f42400 	.word	0x00f42400
 8001ba4:	017d7840 	.word	0x017d7840

08001ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000000 	.word	0x20000000

08001bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bc4:	f7ff fff0 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	0a9b      	lsrs	r3, r3, #10
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	4903      	ldr	r1, [pc, #12]	; (8001be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40023800 	.word	0x40023800
 8001be4:	080040ec 	.word	0x080040ec

08001be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bec:	f7ff ffdc 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	0b5b      	lsrs	r3, r3, #13
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	4903      	ldr	r1, [pc, #12]	; (8001c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bfe:	5ccb      	ldrb	r3, [r1, r3]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	080040ec 	.word	0x080040ec

08001c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e041      	b.n	8001ca6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7fe fef6 	bl	8000a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f000 fb24 	bl	800229c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e041      	b.n	8001d44 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d106      	bne.n	8001cda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f839 	bl	8001d4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	4619      	mov	r1, r3
 8001cec:	4610      	mov	r0, r2
 8001cee:	f000 fad5 	bl	800229c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d109      	bne.n	8001d84 <HAL_TIM_PWM_Start+0x24>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	bf14      	ite	ne
 8001d7c:	2301      	movne	r3, #1
 8001d7e:	2300      	moveq	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	e022      	b.n	8001dca <HAL_TIM_PWM_Start+0x6a>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d109      	bne.n	8001d9e <HAL_TIM_PWM_Start+0x3e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	bf14      	ite	ne
 8001d96:	2301      	movne	r3, #1
 8001d98:	2300      	moveq	r3, #0
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	e015      	b.n	8001dca <HAL_TIM_PWM_Start+0x6a>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d109      	bne.n	8001db8 <HAL_TIM_PWM_Start+0x58>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	bf14      	ite	ne
 8001db0:	2301      	movne	r3, #1
 8001db2:	2300      	moveq	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	e008      	b.n	8001dca <HAL_TIM_PWM_Start+0x6a>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e068      	b.n	8001ea4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d104      	bne.n	8001de2 <HAL_TIM_PWM_Start+0x82>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001de0:	e013      	b.n	8001e0a <HAL_TIM_PWM_Start+0xaa>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d104      	bne.n	8001df2 <HAL_TIM_PWM_Start+0x92>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001df0:	e00b      	b.n	8001e0a <HAL_TIM_PWM_Start+0xaa>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d104      	bne.n	8001e02 <HAL_TIM_PWM_Start+0xa2>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e00:	e003      	b.n	8001e0a <HAL_TIM_PWM_Start+0xaa>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2202      	movs	r2, #2
 8001e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	6839      	ldr	r1, [r7, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 fce8 	bl	80027e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a23      	ldr	r2, [pc, #140]	; (8001eac <HAL_TIM_PWM_Start+0x14c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d107      	bne.n	8001e32 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <HAL_TIM_PWM_Start+0x14c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d018      	beq.n	8001e6e <HAL_TIM_PWM_Start+0x10e>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e44:	d013      	beq.n	8001e6e <HAL_TIM_PWM_Start+0x10e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a19      	ldr	r2, [pc, #100]	; (8001eb0 <HAL_TIM_PWM_Start+0x150>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d00e      	beq.n	8001e6e <HAL_TIM_PWM_Start+0x10e>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a17      	ldr	r2, [pc, #92]	; (8001eb4 <HAL_TIM_PWM_Start+0x154>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d009      	beq.n	8001e6e <HAL_TIM_PWM_Start+0x10e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a16      	ldr	r2, [pc, #88]	; (8001eb8 <HAL_TIM_PWM_Start+0x158>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d004      	beq.n	8001e6e <HAL_TIM_PWM_Start+0x10e>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <HAL_TIM_PWM_Start+0x15c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d111      	bne.n	8001e92 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2b06      	cmp	r3, #6
 8001e7e:	d010      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e90:	e007      	b.n	8001ea2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	40000400 	.word	0x40000400
 8001eb4:	40000800 	.word	0x40000800
 8001eb8:	40000c00 	.word	0x40000c00
 8001ebc:	40014000 	.word	0x40014000

08001ec0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	6839      	ldr	r1, [r7, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fc88 	bl	80027e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a29      	ldr	r2, [pc, #164]	; (8001f84 <HAL_TIM_PWM_Stop+0xc4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d117      	bne.n	8001f12 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6a1a      	ldr	r2, [r3, #32]
 8001ee8:	f241 1311 	movw	r3, #4369	; 0x1111
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10f      	bne.n	8001f12 <HAL_TIM_PWM_Stop+0x52>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6a1a      	ldr	r2, [r3, #32]
 8001ef8:	f240 4344 	movw	r3, #1092	; 0x444
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d107      	bne.n	8001f12 <HAL_TIM_PWM_Stop+0x52>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6a1a      	ldr	r2, [r3, #32]
 8001f18:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10f      	bne.n	8001f42 <HAL_TIM_PWM_Stop+0x82>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6a1a      	ldr	r2, [r3, #32]
 8001f28:	f240 4344 	movw	r3, #1092	; 0x444
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d107      	bne.n	8001f42 <HAL_TIM_PWM_Stop+0x82>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0201 	bic.w	r2, r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d104      	bne.n	8001f52 <HAL_TIM_PWM_Stop+0x92>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f50:	e013      	b.n	8001f7a <HAL_TIM_PWM_Stop+0xba>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d104      	bne.n	8001f62 <HAL_TIM_PWM_Stop+0xa2>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f60:	e00b      	b.n	8001f7a <HAL_TIM_PWM_Stop+0xba>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d104      	bne.n	8001f72 <HAL_TIM_PWM_Stop+0xb2>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f70:	e003      	b.n	8001f7a <HAL_TIM_PWM_Stop+0xba>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40010000 	.word	0x40010000

08001f88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e0ae      	b.n	8002104 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b0c      	cmp	r3, #12
 8001fb2:	f200 809f 	bhi.w	80020f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001fb6:	a201      	add	r2, pc, #4	; (adr r2, 8001fbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbc:	08001ff1 	.word	0x08001ff1
 8001fc0:	080020f5 	.word	0x080020f5
 8001fc4:	080020f5 	.word	0x080020f5
 8001fc8:	080020f5 	.word	0x080020f5
 8001fcc:	08002031 	.word	0x08002031
 8001fd0:	080020f5 	.word	0x080020f5
 8001fd4:	080020f5 	.word	0x080020f5
 8001fd8:	080020f5 	.word	0x080020f5
 8001fdc:	08002073 	.word	0x08002073
 8001fe0:	080020f5 	.word	0x080020f5
 8001fe4:	080020f5 	.word	0x080020f5
 8001fe8:	080020f5 	.word	0x080020f5
 8001fec:	080020b3 	.word	0x080020b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f9d0 	bl	800239c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699a      	ldr	r2, [r3, #24]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0208 	orr.w	r2, r2, #8
 800200a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699a      	ldr	r2, [r3, #24]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0204 	bic.w	r2, r2, #4
 800201a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6999      	ldr	r1, [r3, #24]
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	691a      	ldr	r2, [r3, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	619a      	str	r2, [r3, #24]
      break;
 800202e:	e064      	b.n	80020fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fa16 	bl	8002468 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699a      	ldr	r2, [r3, #24]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800204a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800205a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6999      	ldr	r1, [r3, #24]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	021a      	lsls	r2, r3, #8
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	619a      	str	r2, [r3, #24]
      break;
 8002070:	e043      	b.n	80020fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	4618      	mov	r0, r3
 800207a:	f000 fa61 	bl	8002540 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69da      	ldr	r2, [r3, #28]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 0208 	orr.w	r2, r2, #8
 800208c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	69da      	ldr	r2, [r3, #28]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0204 	bic.w	r2, r2, #4
 800209c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	69d9      	ldr	r1, [r3, #28]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	61da      	str	r2, [r3, #28]
      break;
 80020b0:	e023      	b.n	80020fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 faab 	bl	8002614 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	69da      	ldr	r2, [r3, #28]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	69da      	ldr	r2, [r3, #28]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69d9      	ldr	r1, [r3, #28]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	021a      	lsls	r2, r3, #8
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	61da      	str	r2, [r3, #28]
      break;
 80020f2:	e002      	b.n	80020fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	75fb      	strb	r3, [r7, #23]
      break;
 80020f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002102:	7dfb      	ldrb	r3, [r7, #23]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_TIM_ConfigClockSource+0x1c>
 8002124:	2302      	movs	r3, #2
 8002126:	e0b4      	b.n	8002292 <HAL_TIM_ConfigClockSource+0x186>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800214e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002160:	d03e      	beq.n	80021e0 <HAL_TIM_ConfigClockSource+0xd4>
 8002162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002166:	f200 8087 	bhi.w	8002278 <HAL_TIM_ConfigClockSource+0x16c>
 800216a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800216e:	f000 8086 	beq.w	800227e <HAL_TIM_ConfigClockSource+0x172>
 8002172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002176:	d87f      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x16c>
 8002178:	2b70      	cmp	r3, #112	; 0x70
 800217a:	d01a      	beq.n	80021b2 <HAL_TIM_ConfigClockSource+0xa6>
 800217c:	2b70      	cmp	r3, #112	; 0x70
 800217e:	d87b      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x16c>
 8002180:	2b60      	cmp	r3, #96	; 0x60
 8002182:	d050      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x11a>
 8002184:	2b60      	cmp	r3, #96	; 0x60
 8002186:	d877      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x16c>
 8002188:	2b50      	cmp	r3, #80	; 0x50
 800218a:	d03c      	beq.n	8002206 <HAL_TIM_ConfigClockSource+0xfa>
 800218c:	2b50      	cmp	r3, #80	; 0x50
 800218e:	d873      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x16c>
 8002190:	2b40      	cmp	r3, #64	; 0x40
 8002192:	d058      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x13a>
 8002194:	2b40      	cmp	r3, #64	; 0x40
 8002196:	d86f      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x16c>
 8002198:	2b30      	cmp	r3, #48	; 0x30
 800219a:	d064      	beq.n	8002266 <HAL_TIM_ConfigClockSource+0x15a>
 800219c:	2b30      	cmp	r3, #48	; 0x30
 800219e:	d86b      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x16c>
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d060      	beq.n	8002266 <HAL_TIM_ConfigClockSource+0x15a>
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d867      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x16c>
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d05c      	beq.n	8002266 <HAL_TIM_ConfigClockSource+0x15a>
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	d05a      	beq.n	8002266 <HAL_TIM_ConfigClockSource+0x15a>
 80021b0:	e062      	b.n	8002278 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6899      	ldr	r1, [r3, #8]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f000 faf1 	bl	80027a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	609a      	str	r2, [r3, #8]
      break;
 80021de:	e04f      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	6899      	ldr	r1, [r3, #8]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f000 fada 	bl	80027a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002202:	609a      	str	r2, [r3, #8]
      break;
 8002204:	e03c      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	461a      	mov	r2, r3
 8002214:	f000 fa4e 	bl	80026b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2150      	movs	r1, #80	; 0x50
 800221e:	4618      	mov	r0, r3
 8002220:	f000 faa7 	bl	8002772 <TIM_ITRx_SetConfig>
      break;
 8002224:	e02c      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6859      	ldr	r1, [r3, #4]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	461a      	mov	r2, r3
 8002234:	f000 fa6d 	bl	8002712 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2160      	movs	r1, #96	; 0x60
 800223e:	4618      	mov	r0, r3
 8002240:	f000 fa97 	bl	8002772 <TIM_ITRx_SetConfig>
      break;
 8002244:	e01c      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	6859      	ldr	r1, [r3, #4]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	461a      	mov	r2, r3
 8002254:	f000 fa2e 	bl	80026b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2140      	movs	r1, #64	; 0x40
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fa87 	bl	8002772 <TIM_ITRx_SetConfig>
      break;
 8002264:	e00c      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4619      	mov	r1, r3
 8002270:	4610      	mov	r0, r2
 8002272:	f000 fa7e 	bl	8002772 <TIM_ITRx_SetConfig>
      break;
 8002276:	e003      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
      break;
 800227c:	e000      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800227e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a34      	ldr	r2, [pc, #208]	; (8002380 <TIM_Base_SetConfig+0xe4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d00f      	beq.n	80022d4 <TIM_Base_SetConfig+0x38>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ba:	d00b      	beq.n	80022d4 <TIM_Base_SetConfig+0x38>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a31      	ldr	r2, [pc, #196]	; (8002384 <TIM_Base_SetConfig+0xe8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d007      	beq.n	80022d4 <TIM_Base_SetConfig+0x38>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a30      	ldr	r2, [pc, #192]	; (8002388 <TIM_Base_SetConfig+0xec>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d003      	beq.n	80022d4 <TIM_Base_SetConfig+0x38>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a2f      	ldr	r2, [pc, #188]	; (800238c <TIM_Base_SetConfig+0xf0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d108      	bne.n	80022e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a25      	ldr	r2, [pc, #148]	; (8002380 <TIM_Base_SetConfig+0xe4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d01b      	beq.n	8002326 <TIM_Base_SetConfig+0x8a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f4:	d017      	beq.n	8002326 <TIM_Base_SetConfig+0x8a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a22      	ldr	r2, [pc, #136]	; (8002384 <TIM_Base_SetConfig+0xe8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <TIM_Base_SetConfig+0x8a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a21      	ldr	r2, [pc, #132]	; (8002388 <TIM_Base_SetConfig+0xec>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00f      	beq.n	8002326 <TIM_Base_SetConfig+0x8a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a20      	ldr	r2, [pc, #128]	; (800238c <TIM_Base_SetConfig+0xf0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00b      	beq.n	8002326 <TIM_Base_SetConfig+0x8a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a1f      	ldr	r2, [pc, #124]	; (8002390 <TIM_Base_SetConfig+0xf4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d007      	beq.n	8002326 <TIM_Base_SetConfig+0x8a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a1e      	ldr	r2, [pc, #120]	; (8002394 <TIM_Base_SetConfig+0xf8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d003      	beq.n	8002326 <TIM_Base_SetConfig+0x8a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a1d      	ldr	r2, [pc, #116]	; (8002398 <TIM_Base_SetConfig+0xfc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d108      	bne.n	8002338 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800232c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4313      	orrs	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a08      	ldr	r2, [pc, #32]	; (8002380 <TIM_Base_SetConfig+0xe4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d103      	bne.n	800236c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	615a      	str	r2, [r3, #20]
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40010000 	.word	0x40010000
 8002384:	40000400 	.word	0x40000400
 8002388:	40000800 	.word	0x40000800
 800238c:	40000c00 	.word	0x40000c00
 8002390:	40014000 	.word	0x40014000
 8002394:	40014400 	.word	0x40014400
 8002398:	40014800 	.word	0x40014800

0800239c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	f023 0201 	bic.w	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 0303 	bic.w	r3, r3, #3
 80023d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f023 0302 	bic.w	r3, r3, #2
 80023e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a1c      	ldr	r2, [pc, #112]	; (8002464 <TIM_OC1_SetConfig+0xc8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d10c      	bne.n	8002412 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f023 0308 	bic.w	r3, r3, #8
 80023fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a13      	ldr	r2, [pc, #76]	; (8002464 <TIM_OC1_SetConfig+0xc8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d111      	bne.n	800243e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	621a      	str	r2, [r3, #32]
}
 8002458:	bf00      	nop
 800245a:	371c      	adds	r7, #28
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	40010000 	.word	0x40010000

08002468 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	f023 0210 	bic.w	r2, r3, #16
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f023 0320 	bic.w	r3, r3, #32
 80024b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a1e      	ldr	r2, [pc, #120]	; (800253c <TIM_OC2_SetConfig+0xd4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d10d      	bne.n	80024e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a15      	ldr	r2, [pc, #84]	; (800253c <TIM_OC2_SetConfig+0xd4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d113      	bne.n	8002514 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	621a      	str	r2, [r3, #32]
}
 800252e:	bf00      	nop
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40010000 	.word	0x40010000

08002540 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f023 0303 	bic.w	r3, r3, #3
 8002576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	4313      	orrs	r3, r2
 8002594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <TIM_OC3_SetConfig+0xd0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10d      	bne.n	80025ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a14      	ldr	r2, [pc, #80]	; (8002610 <TIM_OC3_SetConfig+0xd0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d113      	bne.n	80025ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	621a      	str	r2, [r3, #32]
}
 8002604:	bf00      	nop
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	40010000 	.word	0x40010000

08002614 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800265e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	031b      	lsls	r3, r3, #12
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a10      	ldr	r2, [pc, #64]	; (80026b0 <TIM_OC4_SetConfig+0x9c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d109      	bne.n	8002688 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800267a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	019b      	lsls	r3, r3, #6
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	621a      	str	r2, [r3, #32]
}
 80026a2:	bf00      	nop
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40010000 	.word	0x40010000

080026b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	f023 0201 	bic.w	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f023 030a 	bic.w	r3, r3, #10
 80026f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	621a      	str	r2, [r3, #32]
}
 8002706:	bf00      	nop
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002712:	b480      	push	{r7}
 8002714:	b087      	sub	sp, #28
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	f023 0210 	bic.w	r2, r3, #16
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800273c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	031b      	lsls	r3, r3, #12
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800274e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	621a      	str	r2, [r3, #32]
}
 8002766:	bf00      	nop
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002772:	b480      	push	{r7}
 8002774:	b085      	sub	sp, #20
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002788:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	f043 0307 	orr.w	r3, r3, #7
 8002794:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	609a      	str	r2, [r3, #8]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	021a      	lsls	r2, r3, #8
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	609a      	str	r2, [r3, #8]
}
 80027dc:	bf00      	nop
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	2201      	movs	r2, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a1a      	ldr	r2, [r3, #32]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	43db      	mvns	r3, r3
 800280a:	401a      	ands	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a1a      	ldr	r2, [r3, #32]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	fa01 f303 	lsl.w	r3, r1, r3
 8002820:	431a      	orrs	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	621a      	str	r2, [r3, #32]
}
 8002826:	bf00      	nop
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002848:	2302      	movs	r3, #2
 800284a:	e050      	b.n	80028ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002872:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d018      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002898:	d013      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a18      	ldr	r2, [pc, #96]	; (8002900 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00e      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a16      	ldr	r2, [pc, #88]	; (8002904 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d009      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a15      	ldr	r2, [pc, #84]	; (8002908 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d004      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a13      	ldr	r2, [pc, #76]	; (800290c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d10c      	bne.n	80028dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40010000 	.word	0x40010000
 8002900:	40000400 	.word	0x40000400
 8002904:	40000800 	.word	0x40000800
 8002908:	40000c00 	.word	0x40000c00
 800290c:	40014000 	.word	0x40014000

08002910 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002928:	2302      	movs	r3, #2
 800292a:	e03d      	b.n	80029a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4313      	orrs	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e03f      	b.n	8002a46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fe f880 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2224      	movs	r2, #36	; 0x24
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f929 	bl	8002c50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b08a      	sub	sp, #40	; 0x28
 8002a52:	af02      	add	r7, sp, #8
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b20      	cmp	r3, #32
 8002a6c:	d17c      	bne.n	8002b68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <HAL_UART_Transmit+0x2c>
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e075      	b.n	8002b6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_UART_Transmit+0x3e>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e06e      	b.n	8002b6a <HAL_UART_Transmit+0x11c>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2221      	movs	r2, #33	; 0x21
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aa2:	f7fe f9cf 	bl	8000e44 <HAL_GetTick>
 8002aa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	88fa      	ldrh	r2, [r7, #6]
 8002aac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	88fa      	ldrh	r2, [r7, #6]
 8002ab2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002abc:	d108      	bne.n	8002ad0 <HAL_UART_Transmit+0x82>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d104      	bne.n	8002ad0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	e003      	b.n	8002ad8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ae0:	e02a      	b.n	8002b38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2180      	movs	r1, #128	; 0x80
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f840 	bl	8002b72 <UART_WaitOnFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e036      	b.n	8002b6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10b      	bne.n	8002b1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	3302      	adds	r3, #2
 8002b16:	61bb      	str	r3, [r7, #24]
 8002b18:	e007      	b.n	8002b2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	3301      	adds	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1cf      	bne.n	8002ae2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2140      	movs	r1, #64	; 0x40
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f810 	bl	8002b72 <UART_WaitOnFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e006      	b.n	8002b6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	e000      	b.n	8002b6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b68:	2302      	movs	r3, #2
  }
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3720      	adds	r7, #32
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b090      	sub	sp, #64	; 0x40
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b82:	e050      	b.n	8002c26 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8a:	d04c      	beq.n	8002c26 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d007      	beq.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b92:	f7fe f957 	bl	8000e44 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d241      	bcs.n	8002c26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	330c      	adds	r3, #12
 8002ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	e853 3f00 	ldrex	r3, [r3]
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bc2:	637a      	str	r2, [r7, #52]	; 0x34
 8002bc4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bca:	e841 2300 	strex	r3, r2, [r1]
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1e5      	bne.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	3314      	adds	r3, #20
 8002bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	e853 3f00 	ldrex	r3, [r3]
 8002be4:	613b      	str	r3, [r7, #16]
   return(result);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	3314      	adds	r3, #20
 8002bf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bf6:	623a      	str	r2, [r7, #32]
 8002bf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfa:	69f9      	ldr	r1, [r7, #28]
 8002bfc:	6a3a      	ldr	r2, [r7, #32]
 8002bfe:	e841 2300 	strex	r3, r2, [r1]
 8002c02:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1e5      	bne.n	8002bd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e00f      	b.n	8002c46 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	bf0c      	ite	eq
 8002c36:	2301      	moveq	r3, #1
 8002c38:	2300      	movne	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d09f      	beq.n	8002b84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3740      	adds	r7, #64	; 0x40
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c54:	b0c0      	sub	sp, #256	; 0x100
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6c:	68d9      	ldr	r1, [r3, #12]
 8002c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	ea40 0301 	orr.w	r3, r0, r1
 8002c78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ca8:	f021 010c 	bic.w	r1, r1, #12
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002cb6:	430b      	orrs	r3, r1
 8002cb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cca:	6999      	ldr	r1, [r3, #24]
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	ea40 0301 	orr.w	r3, r0, r1
 8002cd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	4b8f      	ldr	r3, [pc, #572]	; (8002f1c <UART_SetConfig+0x2cc>)
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d005      	beq.n	8002cf0 <UART_SetConfig+0xa0>
 8002ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4b8d      	ldr	r3, [pc, #564]	; (8002f20 <UART_SetConfig+0x2d0>)
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d104      	bne.n	8002cfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cf0:	f7fe ff7a 	bl	8001be8 <HAL_RCC_GetPCLK2Freq>
 8002cf4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cf8:	e003      	b.n	8002d02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cfa:	f7fe ff61 	bl	8001bc0 <HAL_RCC_GetPCLK1Freq>
 8002cfe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d0c:	f040 810c 	bne.w	8002f28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d14:	2200      	movs	r2, #0
 8002d16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d22:	4622      	mov	r2, r4
 8002d24:	462b      	mov	r3, r5
 8002d26:	1891      	adds	r1, r2, r2
 8002d28:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d2a:	415b      	adcs	r3, r3
 8002d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d32:	4621      	mov	r1, r4
 8002d34:	eb12 0801 	adds.w	r8, r2, r1
 8002d38:	4629      	mov	r1, r5
 8002d3a:	eb43 0901 	adc.w	r9, r3, r1
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d52:	4690      	mov	r8, r2
 8002d54:	4699      	mov	r9, r3
 8002d56:	4623      	mov	r3, r4
 8002d58:	eb18 0303 	adds.w	r3, r8, r3
 8002d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d60:	462b      	mov	r3, r5
 8002d62:	eb49 0303 	adc.w	r3, r9, r3
 8002d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d7e:	460b      	mov	r3, r1
 8002d80:	18db      	adds	r3, r3, r3
 8002d82:	653b      	str	r3, [r7, #80]	; 0x50
 8002d84:	4613      	mov	r3, r2
 8002d86:	eb42 0303 	adc.w	r3, r2, r3
 8002d8a:	657b      	str	r3, [r7, #84]	; 0x54
 8002d8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d94:	f7fd fa74 	bl	8000280 <__aeabi_uldivmod>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4b61      	ldr	r3, [pc, #388]	; (8002f24 <UART_SetConfig+0x2d4>)
 8002d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	011c      	lsls	r4, r3, #4
 8002da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002daa:	2200      	movs	r2, #0
 8002dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002db0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002db4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002db8:	4642      	mov	r2, r8
 8002dba:	464b      	mov	r3, r9
 8002dbc:	1891      	adds	r1, r2, r2
 8002dbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002dc0:	415b      	adcs	r3, r3
 8002dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dc8:	4641      	mov	r1, r8
 8002dca:	eb12 0a01 	adds.w	sl, r2, r1
 8002dce:	4649      	mov	r1, r9
 8002dd0:	eb43 0b01 	adc.w	fp, r3, r1
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002de0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002de4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002de8:	4692      	mov	sl, r2
 8002dea:	469b      	mov	fp, r3
 8002dec:	4643      	mov	r3, r8
 8002dee:	eb1a 0303 	adds.w	r3, sl, r3
 8002df2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002df6:	464b      	mov	r3, r9
 8002df8:	eb4b 0303 	adc.w	r3, fp, r3
 8002dfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e14:	460b      	mov	r3, r1
 8002e16:	18db      	adds	r3, r3, r3
 8002e18:	643b      	str	r3, [r7, #64]	; 0x40
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	eb42 0303 	adc.w	r3, r2, r3
 8002e20:	647b      	str	r3, [r7, #68]	; 0x44
 8002e22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e2a:	f7fd fa29 	bl	8000280 <__aeabi_uldivmod>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4611      	mov	r1, r2
 8002e34:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <UART_SetConfig+0x2d4>)
 8002e36:	fba3 2301 	umull	r2, r3, r3, r1
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	2264      	movs	r2, #100	; 0x64
 8002e3e:	fb02 f303 	mul.w	r3, r2, r3
 8002e42:	1acb      	subs	r3, r1, r3
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e4a:	4b36      	ldr	r3, [pc, #216]	; (8002f24 <UART_SetConfig+0x2d4>)
 8002e4c:	fba3 2302 	umull	r2, r3, r3, r2
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e58:	441c      	add	r4, r3
 8002e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e6c:	4642      	mov	r2, r8
 8002e6e:	464b      	mov	r3, r9
 8002e70:	1891      	adds	r1, r2, r2
 8002e72:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e74:	415b      	adcs	r3, r3
 8002e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e7c:	4641      	mov	r1, r8
 8002e7e:	1851      	adds	r1, r2, r1
 8002e80:	6339      	str	r1, [r7, #48]	; 0x30
 8002e82:	4649      	mov	r1, r9
 8002e84:	414b      	adcs	r3, r1
 8002e86:	637b      	str	r3, [r7, #52]	; 0x34
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e94:	4659      	mov	r1, fp
 8002e96:	00cb      	lsls	r3, r1, #3
 8002e98:	4651      	mov	r1, sl
 8002e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e9e:	4651      	mov	r1, sl
 8002ea0:	00ca      	lsls	r2, r1, #3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	189b      	adds	r3, r3, r2
 8002eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	460a      	mov	r2, r1
 8002eb4:	eb42 0303 	adc.w	r3, r2, r3
 8002eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ec8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ecc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	18db      	adds	r3, r3, r3
 8002ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	eb42 0303 	adc.w	r3, r2, r3
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ede:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ee2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ee6:	f7fd f9cb 	bl	8000280 <__aeabi_uldivmod>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <UART_SetConfig+0x2d4>)
 8002ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef4:	095b      	lsrs	r3, r3, #5
 8002ef6:	2164      	movs	r1, #100	; 0x64
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	3332      	adds	r3, #50	; 0x32
 8002f02:	4a08      	ldr	r2, [pc, #32]	; (8002f24 <UART_SetConfig+0x2d4>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	f003 0207 	and.w	r2, r3, #7
 8002f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4422      	add	r2, r4
 8002f16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f18:	e105      	b.n	8003126 <UART_SetConfig+0x4d6>
 8002f1a:	bf00      	nop
 8002f1c:	40011000 	.word	0x40011000
 8002f20:	40011400 	.word	0x40011400
 8002f24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f3a:	4642      	mov	r2, r8
 8002f3c:	464b      	mov	r3, r9
 8002f3e:	1891      	adds	r1, r2, r2
 8002f40:	6239      	str	r1, [r7, #32]
 8002f42:	415b      	adcs	r3, r3
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
 8002f46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f4a:	4641      	mov	r1, r8
 8002f4c:	1854      	adds	r4, r2, r1
 8002f4e:	4649      	mov	r1, r9
 8002f50:	eb43 0501 	adc.w	r5, r3, r1
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	00eb      	lsls	r3, r5, #3
 8002f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f62:	00e2      	lsls	r2, r4, #3
 8002f64:	4614      	mov	r4, r2
 8002f66:	461d      	mov	r5, r3
 8002f68:	4643      	mov	r3, r8
 8002f6a:	18e3      	adds	r3, r4, r3
 8002f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f70:	464b      	mov	r3, r9
 8002f72:	eb45 0303 	adc.w	r3, r5, r3
 8002f76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f96:	4629      	mov	r1, r5
 8002f98:	008b      	lsls	r3, r1, #2
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	008a      	lsls	r2, r1, #2
 8002fa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002fa8:	f7fd f96a 	bl	8000280 <__aeabi_uldivmod>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4b60      	ldr	r3, [pc, #384]	; (8003134 <UART_SetConfig+0x4e4>)
 8002fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	011c      	lsls	r4, r3, #4
 8002fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fcc:	4642      	mov	r2, r8
 8002fce:	464b      	mov	r3, r9
 8002fd0:	1891      	adds	r1, r2, r2
 8002fd2:	61b9      	str	r1, [r7, #24]
 8002fd4:	415b      	adcs	r3, r3
 8002fd6:	61fb      	str	r3, [r7, #28]
 8002fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fdc:	4641      	mov	r1, r8
 8002fde:	1851      	adds	r1, r2, r1
 8002fe0:	6139      	str	r1, [r7, #16]
 8002fe2:	4649      	mov	r1, r9
 8002fe4:	414b      	adcs	r3, r1
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ff4:	4659      	mov	r1, fp
 8002ff6:	00cb      	lsls	r3, r1, #3
 8002ff8:	4651      	mov	r1, sl
 8002ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ffe:	4651      	mov	r1, sl
 8003000:	00ca      	lsls	r2, r1, #3
 8003002:	4610      	mov	r0, r2
 8003004:	4619      	mov	r1, r3
 8003006:	4603      	mov	r3, r0
 8003008:	4642      	mov	r2, r8
 800300a:	189b      	adds	r3, r3, r2
 800300c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003010:	464b      	mov	r3, r9
 8003012:	460a      	mov	r2, r1
 8003014:	eb42 0303 	adc.w	r3, r2, r3
 8003018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	67bb      	str	r3, [r7, #120]	; 0x78
 8003026:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003034:	4649      	mov	r1, r9
 8003036:	008b      	lsls	r3, r1, #2
 8003038:	4641      	mov	r1, r8
 800303a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800303e:	4641      	mov	r1, r8
 8003040:	008a      	lsls	r2, r1, #2
 8003042:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003046:	f7fd f91b 	bl	8000280 <__aeabi_uldivmod>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4b39      	ldr	r3, [pc, #228]	; (8003134 <UART_SetConfig+0x4e4>)
 8003050:	fba3 1302 	umull	r1, r3, r3, r2
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	2164      	movs	r1, #100	; 0x64
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	3332      	adds	r3, #50	; 0x32
 8003062:	4a34      	ldr	r2, [pc, #208]	; (8003134 <UART_SetConfig+0x4e4>)
 8003064:	fba2 2303 	umull	r2, r3, r2, r3
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800306e:	441c      	add	r4, r3
 8003070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003074:	2200      	movs	r2, #0
 8003076:	673b      	str	r3, [r7, #112]	; 0x70
 8003078:	677a      	str	r2, [r7, #116]	; 0x74
 800307a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800307e:	4642      	mov	r2, r8
 8003080:	464b      	mov	r3, r9
 8003082:	1891      	adds	r1, r2, r2
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	415b      	adcs	r3, r3
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800308e:	4641      	mov	r1, r8
 8003090:	1851      	adds	r1, r2, r1
 8003092:	6039      	str	r1, [r7, #0]
 8003094:	4649      	mov	r1, r9
 8003096:	414b      	adcs	r3, r1
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030a6:	4659      	mov	r1, fp
 80030a8:	00cb      	lsls	r3, r1, #3
 80030aa:	4651      	mov	r1, sl
 80030ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030b0:	4651      	mov	r1, sl
 80030b2:	00ca      	lsls	r2, r1, #3
 80030b4:	4610      	mov	r0, r2
 80030b6:	4619      	mov	r1, r3
 80030b8:	4603      	mov	r3, r0
 80030ba:	4642      	mov	r2, r8
 80030bc:	189b      	adds	r3, r3, r2
 80030be:	66bb      	str	r3, [r7, #104]	; 0x68
 80030c0:	464b      	mov	r3, r9
 80030c2:	460a      	mov	r2, r1
 80030c4:	eb42 0303 	adc.w	r3, r2, r3
 80030c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	663b      	str	r3, [r7, #96]	; 0x60
 80030d4:	667a      	str	r2, [r7, #100]	; 0x64
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030e2:	4649      	mov	r1, r9
 80030e4:	008b      	lsls	r3, r1, #2
 80030e6:	4641      	mov	r1, r8
 80030e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ec:	4641      	mov	r1, r8
 80030ee:	008a      	lsls	r2, r1, #2
 80030f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030f4:	f7fd f8c4 	bl	8000280 <__aeabi_uldivmod>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <UART_SetConfig+0x4e4>)
 80030fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	2164      	movs	r1, #100	; 0x64
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	3332      	adds	r3, #50	; 0x32
 8003110:	4a08      	ldr	r2, [pc, #32]	; (8003134 <UART_SetConfig+0x4e4>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	f003 020f 	and.w	r2, r3, #15
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4422      	add	r2, r4
 8003124:	609a      	str	r2, [r3, #8]
}
 8003126:	bf00      	nop
 8003128:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800312c:	46bd      	mov	sp, r7
 800312e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003132:	bf00      	nop
 8003134:	51eb851f 	.word	0x51eb851f

08003138 <__errno>:
 8003138:	4b01      	ldr	r3, [pc, #4]	; (8003140 <__errno+0x8>)
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	2000000c 	.word	0x2000000c

08003144 <__libc_init_array>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	4d0d      	ldr	r5, [pc, #52]	; (800317c <__libc_init_array+0x38>)
 8003148:	4c0d      	ldr	r4, [pc, #52]	; (8003180 <__libc_init_array+0x3c>)
 800314a:	1b64      	subs	r4, r4, r5
 800314c:	10a4      	asrs	r4, r4, #2
 800314e:	2600      	movs	r6, #0
 8003150:	42a6      	cmp	r6, r4
 8003152:	d109      	bne.n	8003168 <__libc_init_array+0x24>
 8003154:	4d0b      	ldr	r5, [pc, #44]	; (8003184 <__libc_init_array+0x40>)
 8003156:	4c0c      	ldr	r4, [pc, #48]	; (8003188 <__libc_init_array+0x44>)
 8003158:	f000 ffae 	bl	80040b8 <_init>
 800315c:	1b64      	subs	r4, r4, r5
 800315e:	10a4      	asrs	r4, r4, #2
 8003160:	2600      	movs	r6, #0
 8003162:	42a6      	cmp	r6, r4
 8003164:	d105      	bne.n	8003172 <__libc_init_array+0x2e>
 8003166:	bd70      	pop	{r4, r5, r6, pc}
 8003168:	f855 3b04 	ldr.w	r3, [r5], #4
 800316c:	4798      	blx	r3
 800316e:	3601      	adds	r6, #1
 8003170:	e7ee      	b.n	8003150 <__libc_init_array+0xc>
 8003172:	f855 3b04 	ldr.w	r3, [r5], #4
 8003176:	4798      	blx	r3
 8003178:	3601      	adds	r6, #1
 800317a:	e7f2      	b.n	8003162 <__libc_init_array+0x1e>
 800317c:	08004194 	.word	0x08004194
 8003180:	08004194 	.word	0x08004194
 8003184:	08004194 	.word	0x08004194
 8003188:	08004198 	.word	0x08004198

0800318c <memset>:
 800318c:	4402      	add	r2, r0
 800318e:	4603      	mov	r3, r0
 8003190:	4293      	cmp	r3, r2
 8003192:	d100      	bne.n	8003196 <memset+0xa>
 8003194:	4770      	bx	lr
 8003196:	f803 1b01 	strb.w	r1, [r3], #1
 800319a:	e7f9      	b.n	8003190 <memset+0x4>

0800319c <iprintf>:
 800319c:	b40f      	push	{r0, r1, r2, r3}
 800319e:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <iprintf+0x2c>)
 80031a0:	b513      	push	{r0, r1, r4, lr}
 80031a2:	681c      	ldr	r4, [r3, #0]
 80031a4:	b124      	cbz	r4, 80031b0 <iprintf+0x14>
 80031a6:	69a3      	ldr	r3, [r4, #24]
 80031a8:	b913      	cbnz	r3, 80031b0 <iprintf+0x14>
 80031aa:	4620      	mov	r0, r4
 80031ac:	f000 f866 	bl	800327c <__sinit>
 80031b0:	ab05      	add	r3, sp, #20
 80031b2:	9a04      	ldr	r2, [sp, #16]
 80031b4:	68a1      	ldr	r1, [r4, #8]
 80031b6:	9301      	str	r3, [sp, #4]
 80031b8:	4620      	mov	r0, r4
 80031ba:	f000 f9bd 	bl	8003538 <_vfiprintf_r>
 80031be:	b002      	add	sp, #8
 80031c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031c4:	b004      	add	sp, #16
 80031c6:	4770      	bx	lr
 80031c8:	2000000c 	.word	0x2000000c

080031cc <std>:
 80031cc:	2300      	movs	r3, #0
 80031ce:	b510      	push	{r4, lr}
 80031d0:	4604      	mov	r4, r0
 80031d2:	e9c0 3300 	strd	r3, r3, [r0]
 80031d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031da:	6083      	str	r3, [r0, #8]
 80031dc:	8181      	strh	r1, [r0, #12]
 80031de:	6643      	str	r3, [r0, #100]	; 0x64
 80031e0:	81c2      	strh	r2, [r0, #14]
 80031e2:	6183      	str	r3, [r0, #24]
 80031e4:	4619      	mov	r1, r3
 80031e6:	2208      	movs	r2, #8
 80031e8:	305c      	adds	r0, #92	; 0x5c
 80031ea:	f7ff ffcf 	bl	800318c <memset>
 80031ee:	4b05      	ldr	r3, [pc, #20]	; (8003204 <std+0x38>)
 80031f0:	6263      	str	r3, [r4, #36]	; 0x24
 80031f2:	4b05      	ldr	r3, [pc, #20]	; (8003208 <std+0x3c>)
 80031f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <std+0x40>)
 80031f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <std+0x44>)
 80031fc:	6224      	str	r4, [r4, #32]
 80031fe:	6323      	str	r3, [r4, #48]	; 0x30
 8003200:	bd10      	pop	{r4, pc}
 8003202:	bf00      	nop
 8003204:	08003ae1 	.word	0x08003ae1
 8003208:	08003b03 	.word	0x08003b03
 800320c:	08003b3b 	.word	0x08003b3b
 8003210:	08003b5f 	.word	0x08003b5f

08003214 <_cleanup_r>:
 8003214:	4901      	ldr	r1, [pc, #4]	; (800321c <_cleanup_r+0x8>)
 8003216:	f000 b8af 	b.w	8003378 <_fwalk_reent>
 800321a:	bf00      	nop
 800321c:	08003e39 	.word	0x08003e39

08003220 <__sfmoreglue>:
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	2268      	movs	r2, #104	; 0x68
 8003224:	1e4d      	subs	r5, r1, #1
 8003226:	4355      	muls	r5, r2
 8003228:	460e      	mov	r6, r1
 800322a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800322e:	f000 f8e5 	bl	80033fc <_malloc_r>
 8003232:	4604      	mov	r4, r0
 8003234:	b140      	cbz	r0, 8003248 <__sfmoreglue+0x28>
 8003236:	2100      	movs	r1, #0
 8003238:	e9c0 1600 	strd	r1, r6, [r0]
 800323c:	300c      	adds	r0, #12
 800323e:	60a0      	str	r0, [r4, #8]
 8003240:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003244:	f7ff ffa2 	bl	800318c <memset>
 8003248:	4620      	mov	r0, r4
 800324a:	bd70      	pop	{r4, r5, r6, pc}

0800324c <__sfp_lock_acquire>:
 800324c:	4801      	ldr	r0, [pc, #4]	; (8003254 <__sfp_lock_acquire+0x8>)
 800324e:	f000 b8b3 	b.w	80033b8 <__retarget_lock_acquire_recursive>
 8003252:	bf00      	nop
 8003254:	2000013d 	.word	0x2000013d

08003258 <__sfp_lock_release>:
 8003258:	4801      	ldr	r0, [pc, #4]	; (8003260 <__sfp_lock_release+0x8>)
 800325a:	f000 b8ae 	b.w	80033ba <__retarget_lock_release_recursive>
 800325e:	bf00      	nop
 8003260:	2000013d 	.word	0x2000013d

08003264 <__sinit_lock_acquire>:
 8003264:	4801      	ldr	r0, [pc, #4]	; (800326c <__sinit_lock_acquire+0x8>)
 8003266:	f000 b8a7 	b.w	80033b8 <__retarget_lock_acquire_recursive>
 800326a:	bf00      	nop
 800326c:	2000013e 	.word	0x2000013e

08003270 <__sinit_lock_release>:
 8003270:	4801      	ldr	r0, [pc, #4]	; (8003278 <__sinit_lock_release+0x8>)
 8003272:	f000 b8a2 	b.w	80033ba <__retarget_lock_release_recursive>
 8003276:	bf00      	nop
 8003278:	2000013e 	.word	0x2000013e

0800327c <__sinit>:
 800327c:	b510      	push	{r4, lr}
 800327e:	4604      	mov	r4, r0
 8003280:	f7ff fff0 	bl	8003264 <__sinit_lock_acquire>
 8003284:	69a3      	ldr	r3, [r4, #24]
 8003286:	b11b      	cbz	r3, 8003290 <__sinit+0x14>
 8003288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800328c:	f7ff bff0 	b.w	8003270 <__sinit_lock_release>
 8003290:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003294:	6523      	str	r3, [r4, #80]	; 0x50
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <__sinit+0x68>)
 8003298:	4a13      	ldr	r2, [pc, #76]	; (80032e8 <__sinit+0x6c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	62a2      	str	r2, [r4, #40]	; 0x28
 800329e:	42a3      	cmp	r3, r4
 80032a0:	bf04      	itt	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	61a3      	streq	r3, [r4, #24]
 80032a6:	4620      	mov	r0, r4
 80032a8:	f000 f820 	bl	80032ec <__sfp>
 80032ac:	6060      	str	r0, [r4, #4]
 80032ae:	4620      	mov	r0, r4
 80032b0:	f000 f81c 	bl	80032ec <__sfp>
 80032b4:	60a0      	str	r0, [r4, #8]
 80032b6:	4620      	mov	r0, r4
 80032b8:	f000 f818 	bl	80032ec <__sfp>
 80032bc:	2200      	movs	r2, #0
 80032be:	60e0      	str	r0, [r4, #12]
 80032c0:	2104      	movs	r1, #4
 80032c2:	6860      	ldr	r0, [r4, #4]
 80032c4:	f7ff ff82 	bl	80031cc <std>
 80032c8:	68a0      	ldr	r0, [r4, #8]
 80032ca:	2201      	movs	r2, #1
 80032cc:	2109      	movs	r1, #9
 80032ce:	f7ff ff7d 	bl	80031cc <std>
 80032d2:	68e0      	ldr	r0, [r4, #12]
 80032d4:	2202      	movs	r2, #2
 80032d6:	2112      	movs	r1, #18
 80032d8:	f7ff ff78 	bl	80031cc <std>
 80032dc:	2301      	movs	r3, #1
 80032de:	61a3      	str	r3, [r4, #24]
 80032e0:	e7d2      	b.n	8003288 <__sinit+0xc>
 80032e2:	bf00      	nop
 80032e4:	080040f4 	.word	0x080040f4
 80032e8:	08003215 	.word	0x08003215

080032ec <__sfp>:
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	4607      	mov	r7, r0
 80032f0:	f7ff ffac 	bl	800324c <__sfp_lock_acquire>
 80032f4:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <__sfp+0x84>)
 80032f6:	681e      	ldr	r6, [r3, #0]
 80032f8:	69b3      	ldr	r3, [r6, #24]
 80032fa:	b913      	cbnz	r3, 8003302 <__sfp+0x16>
 80032fc:	4630      	mov	r0, r6
 80032fe:	f7ff ffbd 	bl	800327c <__sinit>
 8003302:	3648      	adds	r6, #72	; 0x48
 8003304:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003308:	3b01      	subs	r3, #1
 800330a:	d503      	bpl.n	8003314 <__sfp+0x28>
 800330c:	6833      	ldr	r3, [r6, #0]
 800330e:	b30b      	cbz	r3, 8003354 <__sfp+0x68>
 8003310:	6836      	ldr	r6, [r6, #0]
 8003312:	e7f7      	b.n	8003304 <__sfp+0x18>
 8003314:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003318:	b9d5      	cbnz	r5, 8003350 <__sfp+0x64>
 800331a:	4b16      	ldr	r3, [pc, #88]	; (8003374 <__sfp+0x88>)
 800331c:	60e3      	str	r3, [r4, #12]
 800331e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003322:	6665      	str	r5, [r4, #100]	; 0x64
 8003324:	f000 f847 	bl	80033b6 <__retarget_lock_init_recursive>
 8003328:	f7ff ff96 	bl	8003258 <__sfp_lock_release>
 800332c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003330:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003334:	6025      	str	r5, [r4, #0]
 8003336:	61a5      	str	r5, [r4, #24]
 8003338:	2208      	movs	r2, #8
 800333a:	4629      	mov	r1, r5
 800333c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003340:	f7ff ff24 	bl	800318c <memset>
 8003344:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003348:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800334c:	4620      	mov	r0, r4
 800334e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003350:	3468      	adds	r4, #104	; 0x68
 8003352:	e7d9      	b.n	8003308 <__sfp+0x1c>
 8003354:	2104      	movs	r1, #4
 8003356:	4638      	mov	r0, r7
 8003358:	f7ff ff62 	bl	8003220 <__sfmoreglue>
 800335c:	4604      	mov	r4, r0
 800335e:	6030      	str	r0, [r6, #0]
 8003360:	2800      	cmp	r0, #0
 8003362:	d1d5      	bne.n	8003310 <__sfp+0x24>
 8003364:	f7ff ff78 	bl	8003258 <__sfp_lock_release>
 8003368:	230c      	movs	r3, #12
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	e7ee      	b.n	800334c <__sfp+0x60>
 800336e:	bf00      	nop
 8003370:	080040f4 	.word	0x080040f4
 8003374:	ffff0001 	.word	0xffff0001

08003378 <_fwalk_reent>:
 8003378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800337c:	4606      	mov	r6, r0
 800337e:	4688      	mov	r8, r1
 8003380:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003384:	2700      	movs	r7, #0
 8003386:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800338a:	f1b9 0901 	subs.w	r9, r9, #1
 800338e:	d505      	bpl.n	800339c <_fwalk_reent+0x24>
 8003390:	6824      	ldr	r4, [r4, #0]
 8003392:	2c00      	cmp	r4, #0
 8003394:	d1f7      	bne.n	8003386 <_fwalk_reent+0xe>
 8003396:	4638      	mov	r0, r7
 8003398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800339c:	89ab      	ldrh	r3, [r5, #12]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d907      	bls.n	80033b2 <_fwalk_reent+0x3a>
 80033a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033a6:	3301      	adds	r3, #1
 80033a8:	d003      	beq.n	80033b2 <_fwalk_reent+0x3a>
 80033aa:	4629      	mov	r1, r5
 80033ac:	4630      	mov	r0, r6
 80033ae:	47c0      	blx	r8
 80033b0:	4307      	orrs	r7, r0
 80033b2:	3568      	adds	r5, #104	; 0x68
 80033b4:	e7e9      	b.n	800338a <_fwalk_reent+0x12>

080033b6 <__retarget_lock_init_recursive>:
 80033b6:	4770      	bx	lr

080033b8 <__retarget_lock_acquire_recursive>:
 80033b8:	4770      	bx	lr

080033ba <__retarget_lock_release_recursive>:
 80033ba:	4770      	bx	lr

080033bc <sbrk_aligned>:
 80033bc:	b570      	push	{r4, r5, r6, lr}
 80033be:	4e0e      	ldr	r6, [pc, #56]	; (80033f8 <sbrk_aligned+0x3c>)
 80033c0:	460c      	mov	r4, r1
 80033c2:	6831      	ldr	r1, [r6, #0]
 80033c4:	4605      	mov	r5, r0
 80033c6:	b911      	cbnz	r1, 80033ce <sbrk_aligned+0x12>
 80033c8:	f000 fb7a 	bl	8003ac0 <_sbrk_r>
 80033cc:	6030      	str	r0, [r6, #0]
 80033ce:	4621      	mov	r1, r4
 80033d0:	4628      	mov	r0, r5
 80033d2:	f000 fb75 	bl	8003ac0 <_sbrk_r>
 80033d6:	1c43      	adds	r3, r0, #1
 80033d8:	d00a      	beq.n	80033f0 <sbrk_aligned+0x34>
 80033da:	1cc4      	adds	r4, r0, #3
 80033dc:	f024 0403 	bic.w	r4, r4, #3
 80033e0:	42a0      	cmp	r0, r4
 80033e2:	d007      	beq.n	80033f4 <sbrk_aligned+0x38>
 80033e4:	1a21      	subs	r1, r4, r0
 80033e6:	4628      	mov	r0, r5
 80033e8:	f000 fb6a 	bl	8003ac0 <_sbrk_r>
 80033ec:	3001      	adds	r0, #1
 80033ee:	d101      	bne.n	80033f4 <sbrk_aligned+0x38>
 80033f0:	f04f 34ff 	mov.w	r4, #4294967295
 80033f4:	4620      	mov	r0, r4
 80033f6:	bd70      	pop	{r4, r5, r6, pc}
 80033f8:	20000144 	.word	0x20000144

080033fc <_malloc_r>:
 80033fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003400:	1ccd      	adds	r5, r1, #3
 8003402:	f025 0503 	bic.w	r5, r5, #3
 8003406:	3508      	adds	r5, #8
 8003408:	2d0c      	cmp	r5, #12
 800340a:	bf38      	it	cc
 800340c:	250c      	movcc	r5, #12
 800340e:	2d00      	cmp	r5, #0
 8003410:	4607      	mov	r7, r0
 8003412:	db01      	blt.n	8003418 <_malloc_r+0x1c>
 8003414:	42a9      	cmp	r1, r5
 8003416:	d905      	bls.n	8003424 <_malloc_r+0x28>
 8003418:	230c      	movs	r3, #12
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	2600      	movs	r6, #0
 800341e:	4630      	mov	r0, r6
 8003420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003424:	4e2e      	ldr	r6, [pc, #184]	; (80034e0 <_malloc_r+0xe4>)
 8003426:	f000 fdbb 	bl	8003fa0 <__malloc_lock>
 800342a:	6833      	ldr	r3, [r6, #0]
 800342c:	461c      	mov	r4, r3
 800342e:	bb34      	cbnz	r4, 800347e <_malloc_r+0x82>
 8003430:	4629      	mov	r1, r5
 8003432:	4638      	mov	r0, r7
 8003434:	f7ff ffc2 	bl	80033bc <sbrk_aligned>
 8003438:	1c43      	adds	r3, r0, #1
 800343a:	4604      	mov	r4, r0
 800343c:	d14d      	bne.n	80034da <_malloc_r+0xde>
 800343e:	6834      	ldr	r4, [r6, #0]
 8003440:	4626      	mov	r6, r4
 8003442:	2e00      	cmp	r6, #0
 8003444:	d140      	bne.n	80034c8 <_malloc_r+0xcc>
 8003446:	6823      	ldr	r3, [r4, #0]
 8003448:	4631      	mov	r1, r6
 800344a:	4638      	mov	r0, r7
 800344c:	eb04 0803 	add.w	r8, r4, r3
 8003450:	f000 fb36 	bl	8003ac0 <_sbrk_r>
 8003454:	4580      	cmp	r8, r0
 8003456:	d13a      	bne.n	80034ce <_malloc_r+0xd2>
 8003458:	6821      	ldr	r1, [r4, #0]
 800345a:	3503      	adds	r5, #3
 800345c:	1a6d      	subs	r5, r5, r1
 800345e:	f025 0503 	bic.w	r5, r5, #3
 8003462:	3508      	adds	r5, #8
 8003464:	2d0c      	cmp	r5, #12
 8003466:	bf38      	it	cc
 8003468:	250c      	movcc	r5, #12
 800346a:	4629      	mov	r1, r5
 800346c:	4638      	mov	r0, r7
 800346e:	f7ff ffa5 	bl	80033bc <sbrk_aligned>
 8003472:	3001      	adds	r0, #1
 8003474:	d02b      	beq.n	80034ce <_malloc_r+0xd2>
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	442b      	add	r3, r5
 800347a:	6023      	str	r3, [r4, #0]
 800347c:	e00e      	b.n	800349c <_malloc_r+0xa0>
 800347e:	6822      	ldr	r2, [r4, #0]
 8003480:	1b52      	subs	r2, r2, r5
 8003482:	d41e      	bmi.n	80034c2 <_malloc_r+0xc6>
 8003484:	2a0b      	cmp	r2, #11
 8003486:	d916      	bls.n	80034b6 <_malloc_r+0xba>
 8003488:	1961      	adds	r1, r4, r5
 800348a:	42a3      	cmp	r3, r4
 800348c:	6025      	str	r5, [r4, #0]
 800348e:	bf18      	it	ne
 8003490:	6059      	strne	r1, [r3, #4]
 8003492:	6863      	ldr	r3, [r4, #4]
 8003494:	bf08      	it	eq
 8003496:	6031      	streq	r1, [r6, #0]
 8003498:	5162      	str	r2, [r4, r5]
 800349a:	604b      	str	r3, [r1, #4]
 800349c:	4638      	mov	r0, r7
 800349e:	f104 060b 	add.w	r6, r4, #11
 80034a2:	f000 fd83 	bl	8003fac <__malloc_unlock>
 80034a6:	f026 0607 	bic.w	r6, r6, #7
 80034aa:	1d23      	adds	r3, r4, #4
 80034ac:	1af2      	subs	r2, r6, r3
 80034ae:	d0b6      	beq.n	800341e <_malloc_r+0x22>
 80034b0:	1b9b      	subs	r3, r3, r6
 80034b2:	50a3      	str	r3, [r4, r2]
 80034b4:	e7b3      	b.n	800341e <_malloc_r+0x22>
 80034b6:	6862      	ldr	r2, [r4, #4]
 80034b8:	42a3      	cmp	r3, r4
 80034ba:	bf0c      	ite	eq
 80034bc:	6032      	streq	r2, [r6, #0]
 80034be:	605a      	strne	r2, [r3, #4]
 80034c0:	e7ec      	b.n	800349c <_malloc_r+0xa0>
 80034c2:	4623      	mov	r3, r4
 80034c4:	6864      	ldr	r4, [r4, #4]
 80034c6:	e7b2      	b.n	800342e <_malloc_r+0x32>
 80034c8:	4634      	mov	r4, r6
 80034ca:	6876      	ldr	r6, [r6, #4]
 80034cc:	e7b9      	b.n	8003442 <_malloc_r+0x46>
 80034ce:	230c      	movs	r3, #12
 80034d0:	603b      	str	r3, [r7, #0]
 80034d2:	4638      	mov	r0, r7
 80034d4:	f000 fd6a 	bl	8003fac <__malloc_unlock>
 80034d8:	e7a1      	b.n	800341e <_malloc_r+0x22>
 80034da:	6025      	str	r5, [r4, #0]
 80034dc:	e7de      	b.n	800349c <_malloc_r+0xa0>
 80034de:	bf00      	nop
 80034e0:	20000140 	.word	0x20000140

080034e4 <__sfputc_r>:
 80034e4:	6893      	ldr	r3, [r2, #8]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	b410      	push	{r4}
 80034ec:	6093      	str	r3, [r2, #8]
 80034ee:	da08      	bge.n	8003502 <__sfputc_r+0x1e>
 80034f0:	6994      	ldr	r4, [r2, #24]
 80034f2:	42a3      	cmp	r3, r4
 80034f4:	db01      	blt.n	80034fa <__sfputc_r+0x16>
 80034f6:	290a      	cmp	r1, #10
 80034f8:	d103      	bne.n	8003502 <__sfputc_r+0x1e>
 80034fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034fe:	f000 bb33 	b.w	8003b68 <__swbuf_r>
 8003502:	6813      	ldr	r3, [r2, #0]
 8003504:	1c58      	adds	r0, r3, #1
 8003506:	6010      	str	r0, [r2, #0]
 8003508:	7019      	strb	r1, [r3, #0]
 800350a:	4608      	mov	r0, r1
 800350c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003510:	4770      	bx	lr

08003512 <__sfputs_r>:
 8003512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003514:	4606      	mov	r6, r0
 8003516:	460f      	mov	r7, r1
 8003518:	4614      	mov	r4, r2
 800351a:	18d5      	adds	r5, r2, r3
 800351c:	42ac      	cmp	r4, r5
 800351e:	d101      	bne.n	8003524 <__sfputs_r+0x12>
 8003520:	2000      	movs	r0, #0
 8003522:	e007      	b.n	8003534 <__sfputs_r+0x22>
 8003524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003528:	463a      	mov	r2, r7
 800352a:	4630      	mov	r0, r6
 800352c:	f7ff ffda 	bl	80034e4 <__sfputc_r>
 8003530:	1c43      	adds	r3, r0, #1
 8003532:	d1f3      	bne.n	800351c <__sfputs_r+0xa>
 8003534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003538 <_vfiprintf_r>:
 8003538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800353c:	460d      	mov	r5, r1
 800353e:	b09d      	sub	sp, #116	; 0x74
 8003540:	4614      	mov	r4, r2
 8003542:	4698      	mov	r8, r3
 8003544:	4606      	mov	r6, r0
 8003546:	b118      	cbz	r0, 8003550 <_vfiprintf_r+0x18>
 8003548:	6983      	ldr	r3, [r0, #24]
 800354a:	b90b      	cbnz	r3, 8003550 <_vfiprintf_r+0x18>
 800354c:	f7ff fe96 	bl	800327c <__sinit>
 8003550:	4b89      	ldr	r3, [pc, #548]	; (8003778 <_vfiprintf_r+0x240>)
 8003552:	429d      	cmp	r5, r3
 8003554:	d11b      	bne.n	800358e <_vfiprintf_r+0x56>
 8003556:	6875      	ldr	r5, [r6, #4]
 8003558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800355a:	07d9      	lsls	r1, r3, #31
 800355c:	d405      	bmi.n	800356a <_vfiprintf_r+0x32>
 800355e:	89ab      	ldrh	r3, [r5, #12]
 8003560:	059a      	lsls	r2, r3, #22
 8003562:	d402      	bmi.n	800356a <_vfiprintf_r+0x32>
 8003564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003566:	f7ff ff27 	bl	80033b8 <__retarget_lock_acquire_recursive>
 800356a:	89ab      	ldrh	r3, [r5, #12]
 800356c:	071b      	lsls	r3, r3, #28
 800356e:	d501      	bpl.n	8003574 <_vfiprintf_r+0x3c>
 8003570:	692b      	ldr	r3, [r5, #16]
 8003572:	b9eb      	cbnz	r3, 80035b0 <_vfiprintf_r+0x78>
 8003574:	4629      	mov	r1, r5
 8003576:	4630      	mov	r0, r6
 8003578:	f000 fb5a 	bl	8003c30 <__swsetup_r>
 800357c:	b1c0      	cbz	r0, 80035b0 <_vfiprintf_r+0x78>
 800357e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003580:	07dc      	lsls	r4, r3, #31
 8003582:	d50e      	bpl.n	80035a2 <_vfiprintf_r+0x6a>
 8003584:	f04f 30ff 	mov.w	r0, #4294967295
 8003588:	b01d      	add	sp, #116	; 0x74
 800358a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800358e:	4b7b      	ldr	r3, [pc, #492]	; (800377c <_vfiprintf_r+0x244>)
 8003590:	429d      	cmp	r5, r3
 8003592:	d101      	bne.n	8003598 <_vfiprintf_r+0x60>
 8003594:	68b5      	ldr	r5, [r6, #8]
 8003596:	e7df      	b.n	8003558 <_vfiprintf_r+0x20>
 8003598:	4b79      	ldr	r3, [pc, #484]	; (8003780 <_vfiprintf_r+0x248>)
 800359a:	429d      	cmp	r5, r3
 800359c:	bf08      	it	eq
 800359e:	68f5      	ldreq	r5, [r6, #12]
 80035a0:	e7da      	b.n	8003558 <_vfiprintf_r+0x20>
 80035a2:	89ab      	ldrh	r3, [r5, #12]
 80035a4:	0598      	lsls	r0, r3, #22
 80035a6:	d4ed      	bmi.n	8003584 <_vfiprintf_r+0x4c>
 80035a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035aa:	f7ff ff06 	bl	80033ba <__retarget_lock_release_recursive>
 80035ae:	e7e9      	b.n	8003584 <_vfiprintf_r+0x4c>
 80035b0:	2300      	movs	r3, #0
 80035b2:	9309      	str	r3, [sp, #36]	; 0x24
 80035b4:	2320      	movs	r3, #32
 80035b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80035be:	2330      	movs	r3, #48	; 0x30
 80035c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003784 <_vfiprintf_r+0x24c>
 80035c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035c8:	f04f 0901 	mov.w	r9, #1
 80035cc:	4623      	mov	r3, r4
 80035ce:	469a      	mov	sl, r3
 80035d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035d4:	b10a      	cbz	r2, 80035da <_vfiprintf_r+0xa2>
 80035d6:	2a25      	cmp	r2, #37	; 0x25
 80035d8:	d1f9      	bne.n	80035ce <_vfiprintf_r+0x96>
 80035da:	ebba 0b04 	subs.w	fp, sl, r4
 80035de:	d00b      	beq.n	80035f8 <_vfiprintf_r+0xc0>
 80035e0:	465b      	mov	r3, fp
 80035e2:	4622      	mov	r2, r4
 80035e4:	4629      	mov	r1, r5
 80035e6:	4630      	mov	r0, r6
 80035e8:	f7ff ff93 	bl	8003512 <__sfputs_r>
 80035ec:	3001      	adds	r0, #1
 80035ee:	f000 80aa 	beq.w	8003746 <_vfiprintf_r+0x20e>
 80035f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035f4:	445a      	add	r2, fp
 80035f6:	9209      	str	r2, [sp, #36]	; 0x24
 80035f8:	f89a 3000 	ldrb.w	r3, [sl]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80a2 	beq.w	8003746 <_vfiprintf_r+0x20e>
 8003602:	2300      	movs	r3, #0
 8003604:	f04f 32ff 	mov.w	r2, #4294967295
 8003608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800360c:	f10a 0a01 	add.w	sl, sl, #1
 8003610:	9304      	str	r3, [sp, #16]
 8003612:	9307      	str	r3, [sp, #28]
 8003614:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003618:	931a      	str	r3, [sp, #104]	; 0x68
 800361a:	4654      	mov	r4, sl
 800361c:	2205      	movs	r2, #5
 800361e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003622:	4858      	ldr	r0, [pc, #352]	; (8003784 <_vfiprintf_r+0x24c>)
 8003624:	f7fc fddc 	bl	80001e0 <memchr>
 8003628:	9a04      	ldr	r2, [sp, #16]
 800362a:	b9d8      	cbnz	r0, 8003664 <_vfiprintf_r+0x12c>
 800362c:	06d1      	lsls	r1, r2, #27
 800362e:	bf44      	itt	mi
 8003630:	2320      	movmi	r3, #32
 8003632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003636:	0713      	lsls	r3, r2, #28
 8003638:	bf44      	itt	mi
 800363a:	232b      	movmi	r3, #43	; 0x2b
 800363c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003640:	f89a 3000 	ldrb.w	r3, [sl]
 8003644:	2b2a      	cmp	r3, #42	; 0x2a
 8003646:	d015      	beq.n	8003674 <_vfiprintf_r+0x13c>
 8003648:	9a07      	ldr	r2, [sp, #28]
 800364a:	4654      	mov	r4, sl
 800364c:	2000      	movs	r0, #0
 800364e:	f04f 0c0a 	mov.w	ip, #10
 8003652:	4621      	mov	r1, r4
 8003654:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003658:	3b30      	subs	r3, #48	; 0x30
 800365a:	2b09      	cmp	r3, #9
 800365c:	d94e      	bls.n	80036fc <_vfiprintf_r+0x1c4>
 800365e:	b1b0      	cbz	r0, 800368e <_vfiprintf_r+0x156>
 8003660:	9207      	str	r2, [sp, #28]
 8003662:	e014      	b.n	800368e <_vfiprintf_r+0x156>
 8003664:	eba0 0308 	sub.w	r3, r0, r8
 8003668:	fa09 f303 	lsl.w	r3, r9, r3
 800366c:	4313      	orrs	r3, r2
 800366e:	9304      	str	r3, [sp, #16]
 8003670:	46a2      	mov	sl, r4
 8003672:	e7d2      	b.n	800361a <_vfiprintf_r+0xe2>
 8003674:	9b03      	ldr	r3, [sp, #12]
 8003676:	1d19      	adds	r1, r3, #4
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	9103      	str	r1, [sp, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	bfbb      	ittet	lt
 8003680:	425b      	neglt	r3, r3
 8003682:	f042 0202 	orrlt.w	r2, r2, #2
 8003686:	9307      	strge	r3, [sp, #28]
 8003688:	9307      	strlt	r3, [sp, #28]
 800368a:	bfb8      	it	lt
 800368c:	9204      	strlt	r2, [sp, #16]
 800368e:	7823      	ldrb	r3, [r4, #0]
 8003690:	2b2e      	cmp	r3, #46	; 0x2e
 8003692:	d10c      	bne.n	80036ae <_vfiprintf_r+0x176>
 8003694:	7863      	ldrb	r3, [r4, #1]
 8003696:	2b2a      	cmp	r3, #42	; 0x2a
 8003698:	d135      	bne.n	8003706 <_vfiprintf_r+0x1ce>
 800369a:	9b03      	ldr	r3, [sp, #12]
 800369c:	1d1a      	adds	r2, r3, #4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	9203      	str	r2, [sp, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	bfb8      	it	lt
 80036a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80036aa:	3402      	adds	r4, #2
 80036ac:	9305      	str	r3, [sp, #20]
 80036ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003794 <_vfiprintf_r+0x25c>
 80036b2:	7821      	ldrb	r1, [r4, #0]
 80036b4:	2203      	movs	r2, #3
 80036b6:	4650      	mov	r0, sl
 80036b8:	f7fc fd92 	bl	80001e0 <memchr>
 80036bc:	b140      	cbz	r0, 80036d0 <_vfiprintf_r+0x198>
 80036be:	2340      	movs	r3, #64	; 0x40
 80036c0:	eba0 000a 	sub.w	r0, r0, sl
 80036c4:	fa03 f000 	lsl.w	r0, r3, r0
 80036c8:	9b04      	ldr	r3, [sp, #16]
 80036ca:	4303      	orrs	r3, r0
 80036cc:	3401      	adds	r4, #1
 80036ce:	9304      	str	r3, [sp, #16]
 80036d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036d4:	482c      	ldr	r0, [pc, #176]	; (8003788 <_vfiprintf_r+0x250>)
 80036d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036da:	2206      	movs	r2, #6
 80036dc:	f7fc fd80 	bl	80001e0 <memchr>
 80036e0:	2800      	cmp	r0, #0
 80036e2:	d03f      	beq.n	8003764 <_vfiprintf_r+0x22c>
 80036e4:	4b29      	ldr	r3, [pc, #164]	; (800378c <_vfiprintf_r+0x254>)
 80036e6:	bb1b      	cbnz	r3, 8003730 <_vfiprintf_r+0x1f8>
 80036e8:	9b03      	ldr	r3, [sp, #12]
 80036ea:	3307      	adds	r3, #7
 80036ec:	f023 0307 	bic.w	r3, r3, #7
 80036f0:	3308      	adds	r3, #8
 80036f2:	9303      	str	r3, [sp, #12]
 80036f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036f6:	443b      	add	r3, r7
 80036f8:	9309      	str	r3, [sp, #36]	; 0x24
 80036fa:	e767      	b.n	80035cc <_vfiprintf_r+0x94>
 80036fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003700:	460c      	mov	r4, r1
 8003702:	2001      	movs	r0, #1
 8003704:	e7a5      	b.n	8003652 <_vfiprintf_r+0x11a>
 8003706:	2300      	movs	r3, #0
 8003708:	3401      	adds	r4, #1
 800370a:	9305      	str	r3, [sp, #20]
 800370c:	4619      	mov	r1, r3
 800370e:	f04f 0c0a 	mov.w	ip, #10
 8003712:	4620      	mov	r0, r4
 8003714:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003718:	3a30      	subs	r2, #48	; 0x30
 800371a:	2a09      	cmp	r2, #9
 800371c:	d903      	bls.n	8003726 <_vfiprintf_r+0x1ee>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0c5      	beq.n	80036ae <_vfiprintf_r+0x176>
 8003722:	9105      	str	r1, [sp, #20]
 8003724:	e7c3      	b.n	80036ae <_vfiprintf_r+0x176>
 8003726:	fb0c 2101 	mla	r1, ip, r1, r2
 800372a:	4604      	mov	r4, r0
 800372c:	2301      	movs	r3, #1
 800372e:	e7f0      	b.n	8003712 <_vfiprintf_r+0x1da>
 8003730:	ab03      	add	r3, sp, #12
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	462a      	mov	r2, r5
 8003736:	4b16      	ldr	r3, [pc, #88]	; (8003790 <_vfiprintf_r+0x258>)
 8003738:	a904      	add	r1, sp, #16
 800373a:	4630      	mov	r0, r6
 800373c:	f3af 8000 	nop.w
 8003740:	4607      	mov	r7, r0
 8003742:	1c78      	adds	r0, r7, #1
 8003744:	d1d6      	bne.n	80036f4 <_vfiprintf_r+0x1bc>
 8003746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003748:	07d9      	lsls	r1, r3, #31
 800374a:	d405      	bmi.n	8003758 <_vfiprintf_r+0x220>
 800374c:	89ab      	ldrh	r3, [r5, #12]
 800374e:	059a      	lsls	r2, r3, #22
 8003750:	d402      	bmi.n	8003758 <_vfiprintf_r+0x220>
 8003752:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003754:	f7ff fe31 	bl	80033ba <__retarget_lock_release_recursive>
 8003758:	89ab      	ldrh	r3, [r5, #12]
 800375a:	065b      	lsls	r3, r3, #25
 800375c:	f53f af12 	bmi.w	8003584 <_vfiprintf_r+0x4c>
 8003760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003762:	e711      	b.n	8003588 <_vfiprintf_r+0x50>
 8003764:	ab03      	add	r3, sp, #12
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	462a      	mov	r2, r5
 800376a:	4b09      	ldr	r3, [pc, #36]	; (8003790 <_vfiprintf_r+0x258>)
 800376c:	a904      	add	r1, sp, #16
 800376e:	4630      	mov	r0, r6
 8003770:	f000 f880 	bl	8003874 <_printf_i>
 8003774:	e7e4      	b.n	8003740 <_vfiprintf_r+0x208>
 8003776:	bf00      	nop
 8003778:	08004118 	.word	0x08004118
 800377c:	08004138 	.word	0x08004138
 8003780:	080040f8 	.word	0x080040f8
 8003784:	08004158 	.word	0x08004158
 8003788:	08004162 	.word	0x08004162
 800378c:	00000000 	.word	0x00000000
 8003790:	08003513 	.word	0x08003513
 8003794:	0800415e 	.word	0x0800415e

08003798 <_printf_common>:
 8003798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800379c:	4616      	mov	r6, r2
 800379e:	4699      	mov	r9, r3
 80037a0:	688a      	ldr	r2, [r1, #8]
 80037a2:	690b      	ldr	r3, [r1, #16]
 80037a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037a8:	4293      	cmp	r3, r2
 80037aa:	bfb8      	it	lt
 80037ac:	4613      	movlt	r3, r2
 80037ae:	6033      	str	r3, [r6, #0]
 80037b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037b4:	4607      	mov	r7, r0
 80037b6:	460c      	mov	r4, r1
 80037b8:	b10a      	cbz	r2, 80037be <_printf_common+0x26>
 80037ba:	3301      	adds	r3, #1
 80037bc:	6033      	str	r3, [r6, #0]
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	0699      	lsls	r1, r3, #26
 80037c2:	bf42      	ittt	mi
 80037c4:	6833      	ldrmi	r3, [r6, #0]
 80037c6:	3302      	addmi	r3, #2
 80037c8:	6033      	strmi	r3, [r6, #0]
 80037ca:	6825      	ldr	r5, [r4, #0]
 80037cc:	f015 0506 	ands.w	r5, r5, #6
 80037d0:	d106      	bne.n	80037e0 <_printf_common+0x48>
 80037d2:	f104 0a19 	add.w	sl, r4, #25
 80037d6:	68e3      	ldr	r3, [r4, #12]
 80037d8:	6832      	ldr	r2, [r6, #0]
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	42ab      	cmp	r3, r5
 80037de:	dc26      	bgt.n	800382e <_printf_common+0x96>
 80037e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037e4:	1e13      	subs	r3, r2, #0
 80037e6:	6822      	ldr	r2, [r4, #0]
 80037e8:	bf18      	it	ne
 80037ea:	2301      	movne	r3, #1
 80037ec:	0692      	lsls	r2, r2, #26
 80037ee:	d42b      	bmi.n	8003848 <_printf_common+0xb0>
 80037f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037f4:	4649      	mov	r1, r9
 80037f6:	4638      	mov	r0, r7
 80037f8:	47c0      	blx	r8
 80037fa:	3001      	adds	r0, #1
 80037fc:	d01e      	beq.n	800383c <_printf_common+0xa4>
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	68e5      	ldr	r5, [r4, #12]
 8003802:	6832      	ldr	r2, [r6, #0]
 8003804:	f003 0306 	and.w	r3, r3, #6
 8003808:	2b04      	cmp	r3, #4
 800380a:	bf08      	it	eq
 800380c:	1aad      	subeq	r5, r5, r2
 800380e:	68a3      	ldr	r3, [r4, #8]
 8003810:	6922      	ldr	r2, [r4, #16]
 8003812:	bf0c      	ite	eq
 8003814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003818:	2500      	movne	r5, #0
 800381a:	4293      	cmp	r3, r2
 800381c:	bfc4      	itt	gt
 800381e:	1a9b      	subgt	r3, r3, r2
 8003820:	18ed      	addgt	r5, r5, r3
 8003822:	2600      	movs	r6, #0
 8003824:	341a      	adds	r4, #26
 8003826:	42b5      	cmp	r5, r6
 8003828:	d11a      	bne.n	8003860 <_printf_common+0xc8>
 800382a:	2000      	movs	r0, #0
 800382c:	e008      	b.n	8003840 <_printf_common+0xa8>
 800382e:	2301      	movs	r3, #1
 8003830:	4652      	mov	r2, sl
 8003832:	4649      	mov	r1, r9
 8003834:	4638      	mov	r0, r7
 8003836:	47c0      	blx	r8
 8003838:	3001      	adds	r0, #1
 800383a:	d103      	bne.n	8003844 <_printf_common+0xac>
 800383c:	f04f 30ff 	mov.w	r0, #4294967295
 8003840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003844:	3501      	adds	r5, #1
 8003846:	e7c6      	b.n	80037d6 <_printf_common+0x3e>
 8003848:	18e1      	adds	r1, r4, r3
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	2030      	movs	r0, #48	; 0x30
 800384e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003852:	4422      	add	r2, r4
 8003854:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003858:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800385c:	3302      	adds	r3, #2
 800385e:	e7c7      	b.n	80037f0 <_printf_common+0x58>
 8003860:	2301      	movs	r3, #1
 8003862:	4622      	mov	r2, r4
 8003864:	4649      	mov	r1, r9
 8003866:	4638      	mov	r0, r7
 8003868:	47c0      	blx	r8
 800386a:	3001      	adds	r0, #1
 800386c:	d0e6      	beq.n	800383c <_printf_common+0xa4>
 800386e:	3601      	adds	r6, #1
 8003870:	e7d9      	b.n	8003826 <_printf_common+0x8e>
	...

08003874 <_printf_i>:
 8003874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003878:	7e0f      	ldrb	r7, [r1, #24]
 800387a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800387c:	2f78      	cmp	r7, #120	; 0x78
 800387e:	4691      	mov	r9, r2
 8003880:	4680      	mov	r8, r0
 8003882:	460c      	mov	r4, r1
 8003884:	469a      	mov	sl, r3
 8003886:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800388a:	d807      	bhi.n	800389c <_printf_i+0x28>
 800388c:	2f62      	cmp	r7, #98	; 0x62
 800388e:	d80a      	bhi.n	80038a6 <_printf_i+0x32>
 8003890:	2f00      	cmp	r7, #0
 8003892:	f000 80d8 	beq.w	8003a46 <_printf_i+0x1d2>
 8003896:	2f58      	cmp	r7, #88	; 0x58
 8003898:	f000 80a3 	beq.w	80039e2 <_printf_i+0x16e>
 800389c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038a4:	e03a      	b.n	800391c <_printf_i+0xa8>
 80038a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038aa:	2b15      	cmp	r3, #21
 80038ac:	d8f6      	bhi.n	800389c <_printf_i+0x28>
 80038ae:	a101      	add	r1, pc, #4	; (adr r1, 80038b4 <_printf_i+0x40>)
 80038b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038b4:	0800390d 	.word	0x0800390d
 80038b8:	08003921 	.word	0x08003921
 80038bc:	0800389d 	.word	0x0800389d
 80038c0:	0800389d 	.word	0x0800389d
 80038c4:	0800389d 	.word	0x0800389d
 80038c8:	0800389d 	.word	0x0800389d
 80038cc:	08003921 	.word	0x08003921
 80038d0:	0800389d 	.word	0x0800389d
 80038d4:	0800389d 	.word	0x0800389d
 80038d8:	0800389d 	.word	0x0800389d
 80038dc:	0800389d 	.word	0x0800389d
 80038e0:	08003a2d 	.word	0x08003a2d
 80038e4:	08003951 	.word	0x08003951
 80038e8:	08003a0f 	.word	0x08003a0f
 80038ec:	0800389d 	.word	0x0800389d
 80038f0:	0800389d 	.word	0x0800389d
 80038f4:	08003a4f 	.word	0x08003a4f
 80038f8:	0800389d 	.word	0x0800389d
 80038fc:	08003951 	.word	0x08003951
 8003900:	0800389d 	.word	0x0800389d
 8003904:	0800389d 	.word	0x0800389d
 8003908:	08003a17 	.word	0x08003a17
 800390c:	682b      	ldr	r3, [r5, #0]
 800390e:	1d1a      	adds	r2, r3, #4
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	602a      	str	r2, [r5, #0]
 8003914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800391c:	2301      	movs	r3, #1
 800391e:	e0a3      	b.n	8003a68 <_printf_i+0x1f4>
 8003920:	6820      	ldr	r0, [r4, #0]
 8003922:	6829      	ldr	r1, [r5, #0]
 8003924:	0606      	lsls	r6, r0, #24
 8003926:	f101 0304 	add.w	r3, r1, #4
 800392a:	d50a      	bpl.n	8003942 <_printf_i+0xce>
 800392c:	680e      	ldr	r6, [r1, #0]
 800392e:	602b      	str	r3, [r5, #0]
 8003930:	2e00      	cmp	r6, #0
 8003932:	da03      	bge.n	800393c <_printf_i+0xc8>
 8003934:	232d      	movs	r3, #45	; 0x2d
 8003936:	4276      	negs	r6, r6
 8003938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800393c:	485e      	ldr	r0, [pc, #376]	; (8003ab8 <_printf_i+0x244>)
 800393e:	230a      	movs	r3, #10
 8003940:	e019      	b.n	8003976 <_printf_i+0x102>
 8003942:	680e      	ldr	r6, [r1, #0]
 8003944:	602b      	str	r3, [r5, #0]
 8003946:	f010 0f40 	tst.w	r0, #64	; 0x40
 800394a:	bf18      	it	ne
 800394c:	b236      	sxthne	r6, r6
 800394e:	e7ef      	b.n	8003930 <_printf_i+0xbc>
 8003950:	682b      	ldr	r3, [r5, #0]
 8003952:	6820      	ldr	r0, [r4, #0]
 8003954:	1d19      	adds	r1, r3, #4
 8003956:	6029      	str	r1, [r5, #0]
 8003958:	0601      	lsls	r1, r0, #24
 800395a:	d501      	bpl.n	8003960 <_printf_i+0xec>
 800395c:	681e      	ldr	r6, [r3, #0]
 800395e:	e002      	b.n	8003966 <_printf_i+0xf2>
 8003960:	0646      	lsls	r6, r0, #25
 8003962:	d5fb      	bpl.n	800395c <_printf_i+0xe8>
 8003964:	881e      	ldrh	r6, [r3, #0]
 8003966:	4854      	ldr	r0, [pc, #336]	; (8003ab8 <_printf_i+0x244>)
 8003968:	2f6f      	cmp	r7, #111	; 0x6f
 800396a:	bf0c      	ite	eq
 800396c:	2308      	moveq	r3, #8
 800396e:	230a      	movne	r3, #10
 8003970:	2100      	movs	r1, #0
 8003972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003976:	6865      	ldr	r5, [r4, #4]
 8003978:	60a5      	str	r5, [r4, #8]
 800397a:	2d00      	cmp	r5, #0
 800397c:	bfa2      	ittt	ge
 800397e:	6821      	ldrge	r1, [r4, #0]
 8003980:	f021 0104 	bicge.w	r1, r1, #4
 8003984:	6021      	strge	r1, [r4, #0]
 8003986:	b90e      	cbnz	r6, 800398c <_printf_i+0x118>
 8003988:	2d00      	cmp	r5, #0
 800398a:	d04d      	beq.n	8003a28 <_printf_i+0x1b4>
 800398c:	4615      	mov	r5, r2
 800398e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003992:	fb03 6711 	mls	r7, r3, r1, r6
 8003996:	5dc7      	ldrb	r7, [r0, r7]
 8003998:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800399c:	4637      	mov	r7, r6
 800399e:	42bb      	cmp	r3, r7
 80039a0:	460e      	mov	r6, r1
 80039a2:	d9f4      	bls.n	800398e <_printf_i+0x11a>
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d10b      	bne.n	80039c0 <_printf_i+0x14c>
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	07de      	lsls	r6, r3, #31
 80039ac:	d508      	bpl.n	80039c0 <_printf_i+0x14c>
 80039ae:	6923      	ldr	r3, [r4, #16]
 80039b0:	6861      	ldr	r1, [r4, #4]
 80039b2:	4299      	cmp	r1, r3
 80039b4:	bfde      	ittt	le
 80039b6:	2330      	movle	r3, #48	; 0x30
 80039b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039c0:	1b52      	subs	r2, r2, r5
 80039c2:	6122      	str	r2, [r4, #16]
 80039c4:	f8cd a000 	str.w	sl, [sp]
 80039c8:	464b      	mov	r3, r9
 80039ca:	aa03      	add	r2, sp, #12
 80039cc:	4621      	mov	r1, r4
 80039ce:	4640      	mov	r0, r8
 80039d0:	f7ff fee2 	bl	8003798 <_printf_common>
 80039d4:	3001      	adds	r0, #1
 80039d6:	d14c      	bne.n	8003a72 <_printf_i+0x1fe>
 80039d8:	f04f 30ff 	mov.w	r0, #4294967295
 80039dc:	b004      	add	sp, #16
 80039de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e2:	4835      	ldr	r0, [pc, #212]	; (8003ab8 <_printf_i+0x244>)
 80039e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80039e8:	6829      	ldr	r1, [r5, #0]
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80039f0:	6029      	str	r1, [r5, #0]
 80039f2:	061d      	lsls	r5, r3, #24
 80039f4:	d514      	bpl.n	8003a20 <_printf_i+0x1ac>
 80039f6:	07df      	lsls	r7, r3, #31
 80039f8:	bf44      	itt	mi
 80039fa:	f043 0320 	orrmi.w	r3, r3, #32
 80039fe:	6023      	strmi	r3, [r4, #0]
 8003a00:	b91e      	cbnz	r6, 8003a0a <_printf_i+0x196>
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	f023 0320 	bic.w	r3, r3, #32
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	2310      	movs	r3, #16
 8003a0c:	e7b0      	b.n	8003970 <_printf_i+0xfc>
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	f043 0320 	orr.w	r3, r3, #32
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	2378      	movs	r3, #120	; 0x78
 8003a18:	4828      	ldr	r0, [pc, #160]	; (8003abc <_printf_i+0x248>)
 8003a1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a1e:	e7e3      	b.n	80039e8 <_printf_i+0x174>
 8003a20:	0659      	lsls	r1, r3, #25
 8003a22:	bf48      	it	mi
 8003a24:	b2b6      	uxthmi	r6, r6
 8003a26:	e7e6      	b.n	80039f6 <_printf_i+0x182>
 8003a28:	4615      	mov	r5, r2
 8003a2a:	e7bb      	b.n	80039a4 <_printf_i+0x130>
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	6826      	ldr	r6, [r4, #0]
 8003a30:	6961      	ldr	r1, [r4, #20]
 8003a32:	1d18      	adds	r0, r3, #4
 8003a34:	6028      	str	r0, [r5, #0]
 8003a36:	0635      	lsls	r5, r6, #24
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	d501      	bpl.n	8003a40 <_printf_i+0x1cc>
 8003a3c:	6019      	str	r1, [r3, #0]
 8003a3e:	e002      	b.n	8003a46 <_printf_i+0x1d2>
 8003a40:	0670      	lsls	r0, r6, #25
 8003a42:	d5fb      	bpl.n	8003a3c <_printf_i+0x1c8>
 8003a44:	8019      	strh	r1, [r3, #0]
 8003a46:	2300      	movs	r3, #0
 8003a48:	6123      	str	r3, [r4, #16]
 8003a4a:	4615      	mov	r5, r2
 8003a4c:	e7ba      	b.n	80039c4 <_printf_i+0x150>
 8003a4e:	682b      	ldr	r3, [r5, #0]
 8003a50:	1d1a      	adds	r2, r3, #4
 8003a52:	602a      	str	r2, [r5, #0]
 8003a54:	681d      	ldr	r5, [r3, #0]
 8003a56:	6862      	ldr	r2, [r4, #4]
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	f7fc fbc0 	bl	80001e0 <memchr>
 8003a60:	b108      	cbz	r0, 8003a66 <_printf_i+0x1f2>
 8003a62:	1b40      	subs	r0, r0, r5
 8003a64:	6060      	str	r0, [r4, #4]
 8003a66:	6863      	ldr	r3, [r4, #4]
 8003a68:	6123      	str	r3, [r4, #16]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a70:	e7a8      	b.n	80039c4 <_printf_i+0x150>
 8003a72:	6923      	ldr	r3, [r4, #16]
 8003a74:	462a      	mov	r2, r5
 8003a76:	4649      	mov	r1, r9
 8003a78:	4640      	mov	r0, r8
 8003a7a:	47d0      	blx	sl
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	d0ab      	beq.n	80039d8 <_printf_i+0x164>
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	079b      	lsls	r3, r3, #30
 8003a84:	d413      	bmi.n	8003aae <_printf_i+0x23a>
 8003a86:	68e0      	ldr	r0, [r4, #12]
 8003a88:	9b03      	ldr	r3, [sp, #12]
 8003a8a:	4298      	cmp	r0, r3
 8003a8c:	bfb8      	it	lt
 8003a8e:	4618      	movlt	r0, r3
 8003a90:	e7a4      	b.n	80039dc <_printf_i+0x168>
 8003a92:	2301      	movs	r3, #1
 8003a94:	4632      	mov	r2, r6
 8003a96:	4649      	mov	r1, r9
 8003a98:	4640      	mov	r0, r8
 8003a9a:	47d0      	blx	sl
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	d09b      	beq.n	80039d8 <_printf_i+0x164>
 8003aa0:	3501      	adds	r5, #1
 8003aa2:	68e3      	ldr	r3, [r4, #12]
 8003aa4:	9903      	ldr	r1, [sp, #12]
 8003aa6:	1a5b      	subs	r3, r3, r1
 8003aa8:	42ab      	cmp	r3, r5
 8003aaa:	dcf2      	bgt.n	8003a92 <_printf_i+0x21e>
 8003aac:	e7eb      	b.n	8003a86 <_printf_i+0x212>
 8003aae:	2500      	movs	r5, #0
 8003ab0:	f104 0619 	add.w	r6, r4, #25
 8003ab4:	e7f5      	b.n	8003aa2 <_printf_i+0x22e>
 8003ab6:	bf00      	nop
 8003ab8:	08004169 	.word	0x08004169
 8003abc:	0800417a 	.word	0x0800417a

08003ac0 <_sbrk_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	4d06      	ldr	r5, [pc, #24]	; (8003adc <_sbrk_r+0x1c>)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	4608      	mov	r0, r1
 8003aca:	602b      	str	r3, [r5, #0]
 8003acc:	f7fd f8ce 	bl	8000c6c <_sbrk>
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	d102      	bne.n	8003ada <_sbrk_r+0x1a>
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	b103      	cbz	r3, 8003ada <_sbrk_r+0x1a>
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	bd38      	pop	{r3, r4, r5, pc}
 8003adc:	20000148 	.word	0x20000148

08003ae0 <__sread>:
 8003ae0:	b510      	push	{r4, lr}
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ae8:	f000 fab2 	bl	8004050 <_read_r>
 8003aec:	2800      	cmp	r0, #0
 8003aee:	bfab      	itete	ge
 8003af0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003af2:	89a3      	ldrhlt	r3, [r4, #12]
 8003af4:	181b      	addge	r3, r3, r0
 8003af6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003afa:	bfac      	ite	ge
 8003afc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003afe:	81a3      	strhlt	r3, [r4, #12]
 8003b00:	bd10      	pop	{r4, pc}

08003b02 <__swrite>:
 8003b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b06:	461f      	mov	r7, r3
 8003b08:	898b      	ldrh	r3, [r1, #12]
 8003b0a:	05db      	lsls	r3, r3, #23
 8003b0c:	4605      	mov	r5, r0
 8003b0e:	460c      	mov	r4, r1
 8003b10:	4616      	mov	r6, r2
 8003b12:	d505      	bpl.n	8003b20 <__swrite+0x1e>
 8003b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b18:	2302      	movs	r3, #2
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f000 f9c8 	bl	8003eb0 <_lseek_r>
 8003b20:	89a3      	ldrh	r3, [r4, #12]
 8003b22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b2a:	81a3      	strh	r3, [r4, #12]
 8003b2c:	4632      	mov	r2, r6
 8003b2e:	463b      	mov	r3, r7
 8003b30:	4628      	mov	r0, r5
 8003b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b36:	f000 b869 	b.w	8003c0c <_write_r>

08003b3a <__sseek>:
 8003b3a:	b510      	push	{r4, lr}
 8003b3c:	460c      	mov	r4, r1
 8003b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b42:	f000 f9b5 	bl	8003eb0 <_lseek_r>
 8003b46:	1c43      	adds	r3, r0, #1
 8003b48:	89a3      	ldrh	r3, [r4, #12]
 8003b4a:	bf15      	itete	ne
 8003b4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b56:	81a3      	strheq	r3, [r4, #12]
 8003b58:	bf18      	it	ne
 8003b5a:	81a3      	strhne	r3, [r4, #12]
 8003b5c:	bd10      	pop	{r4, pc}

08003b5e <__sclose>:
 8003b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b62:	f000 b8d3 	b.w	8003d0c <_close_r>
	...

08003b68 <__swbuf_r>:
 8003b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6a:	460e      	mov	r6, r1
 8003b6c:	4614      	mov	r4, r2
 8003b6e:	4605      	mov	r5, r0
 8003b70:	b118      	cbz	r0, 8003b7a <__swbuf_r+0x12>
 8003b72:	6983      	ldr	r3, [r0, #24]
 8003b74:	b90b      	cbnz	r3, 8003b7a <__swbuf_r+0x12>
 8003b76:	f7ff fb81 	bl	800327c <__sinit>
 8003b7a:	4b21      	ldr	r3, [pc, #132]	; (8003c00 <__swbuf_r+0x98>)
 8003b7c:	429c      	cmp	r4, r3
 8003b7e:	d12b      	bne.n	8003bd8 <__swbuf_r+0x70>
 8003b80:	686c      	ldr	r4, [r5, #4]
 8003b82:	69a3      	ldr	r3, [r4, #24]
 8003b84:	60a3      	str	r3, [r4, #8]
 8003b86:	89a3      	ldrh	r3, [r4, #12]
 8003b88:	071a      	lsls	r2, r3, #28
 8003b8a:	d52f      	bpl.n	8003bec <__swbuf_r+0x84>
 8003b8c:	6923      	ldr	r3, [r4, #16]
 8003b8e:	b36b      	cbz	r3, 8003bec <__swbuf_r+0x84>
 8003b90:	6923      	ldr	r3, [r4, #16]
 8003b92:	6820      	ldr	r0, [r4, #0]
 8003b94:	1ac0      	subs	r0, r0, r3
 8003b96:	6963      	ldr	r3, [r4, #20]
 8003b98:	b2f6      	uxtb	r6, r6
 8003b9a:	4283      	cmp	r3, r0
 8003b9c:	4637      	mov	r7, r6
 8003b9e:	dc04      	bgt.n	8003baa <__swbuf_r+0x42>
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	4628      	mov	r0, r5
 8003ba4:	f000 f948 	bl	8003e38 <_fflush_r>
 8003ba8:	bb30      	cbnz	r0, 8003bf8 <__swbuf_r+0x90>
 8003baa:	68a3      	ldr	r3, [r4, #8]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	60a3      	str	r3, [r4, #8]
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	6022      	str	r2, [r4, #0]
 8003bb6:	701e      	strb	r6, [r3, #0]
 8003bb8:	6963      	ldr	r3, [r4, #20]
 8003bba:	3001      	adds	r0, #1
 8003bbc:	4283      	cmp	r3, r0
 8003bbe:	d004      	beq.n	8003bca <__swbuf_r+0x62>
 8003bc0:	89a3      	ldrh	r3, [r4, #12]
 8003bc2:	07db      	lsls	r3, r3, #31
 8003bc4:	d506      	bpl.n	8003bd4 <__swbuf_r+0x6c>
 8003bc6:	2e0a      	cmp	r6, #10
 8003bc8:	d104      	bne.n	8003bd4 <__swbuf_r+0x6c>
 8003bca:	4621      	mov	r1, r4
 8003bcc:	4628      	mov	r0, r5
 8003bce:	f000 f933 	bl	8003e38 <_fflush_r>
 8003bd2:	b988      	cbnz	r0, 8003bf8 <__swbuf_r+0x90>
 8003bd4:	4638      	mov	r0, r7
 8003bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <__swbuf_r+0x9c>)
 8003bda:	429c      	cmp	r4, r3
 8003bdc:	d101      	bne.n	8003be2 <__swbuf_r+0x7a>
 8003bde:	68ac      	ldr	r4, [r5, #8]
 8003be0:	e7cf      	b.n	8003b82 <__swbuf_r+0x1a>
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <__swbuf_r+0xa0>)
 8003be4:	429c      	cmp	r4, r3
 8003be6:	bf08      	it	eq
 8003be8:	68ec      	ldreq	r4, [r5, #12]
 8003bea:	e7ca      	b.n	8003b82 <__swbuf_r+0x1a>
 8003bec:	4621      	mov	r1, r4
 8003bee:	4628      	mov	r0, r5
 8003bf0:	f000 f81e 	bl	8003c30 <__swsetup_r>
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	d0cb      	beq.n	8003b90 <__swbuf_r+0x28>
 8003bf8:	f04f 37ff 	mov.w	r7, #4294967295
 8003bfc:	e7ea      	b.n	8003bd4 <__swbuf_r+0x6c>
 8003bfe:	bf00      	nop
 8003c00:	08004118 	.word	0x08004118
 8003c04:	08004138 	.word	0x08004138
 8003c08:	080040f8 	.word	0x080040f8

08003c0c <_write_r>:
 8003c0c:	b538      	push	{r3, r4, r5, lr}
 8003c0e:	4d07      	ldr	r5, [pc, #28]	; (8003c2c <_write_r+0x20>)
 8003c10:	4604      	mov	r4, r0
 8003c12:	4608      	mov	r0, r1
 8003c14:	4611      	mov	r1, r2
 8003c16:	2200      	movs	r2, #0
 8003c18:	602a      	str	r2, [r5, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f7fd f86e 	bl	8000cfc <_write>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	d102      	bne.n	8003c2a <_write_r+0x1e>
 8003c24:	682b      	ldr	r3, [r5, #0]
 8003c26:	b103      	cbz	r3, 8003c2a <_write_r+0x1e>
 8003c28:	6023      	str	r3, [r4, #0]
 8003c2a:	bd38      	pop	{r3, r4, r5, pc}
 8003c2c:	20000148 	.word	0x20000148

08003c30 <__swsetup_r>:
 8003c30:	4b32      	ldr	r3, [pc, #200]	; (8003cfc <__swsetup_r+0xcc>)
 8003c32:	b570      	push	{r4, r5, r6, lr}
 8003c34:	681d      	ldr	r5, [r3, #0]
 8003c36:	4606      	mov	r6, r0
 8003c38:	460c      	mov	r4, r1
 8003c3a:	b125      	cbz	r5, 8003c46 <__swsetup_r+0x16>
 8003c3c:	69ab      	ldr	r3, [r5, #24]
 8003c3e:	b913      	cbnz	r3, 8003c46 <__swsetup_r+0x16>
 8003c40:	4628      	mov	r0, r5
 8003c42:	f7ff fb1b 	bl	800327c <__sinit>
 8003c46:	4b2e      	ldr	r3, [pc, #184]	; (8003d00 <__swsetup_r+0xd0>)
 8003c48:	429c      	cmp	r4, r3
 8003c4a:	d10f      	bne.n	8003c6c <__swsetup_r+0x3c>
 8003c4c:	686c      	ldr	r4, [r5, #4]
 8003c4e:	89a3      	ldrh	r3, [r4, #12]
 8003c50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c54:	0719      	lsls	r1, r3, #28
 8003c56:	d42c      	bmi.n	8003cb2 <__swsetup_r+0x82>
 8003c58:	06dd      	lsls	r5, r3, #27
 8003c5a:	d411      	bmi.n	8003c80 <__swsetup_r+0x50>
 8003c5c:	2309      	movs	r3, #9
 8003c5e:	6033      	str	r3, [r6, #0]
 8003c60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003c64:	81a3      	strh	r3, [r4, #12]
 8003c66:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6a:	e03e      	b.n	8003cea <__swsetup_r+0xba>
 8003c6c:	4b25      	ldr	r3, [pc, #148]	; (8003d04 <__swsetup_r+0xd4>)
 8003c6e:	429c      	cmp	r4, r3
 8003c70:	d101      	bne.n	8003c76 <__swsetup_r+0x46>
 8003c72:	68ac      	ldr	r4, [r5, #8]
 8003c74:	e7eb      	b.n	8003c4e <__swsetup_r+0x1e>
 8003c76:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <__swsetup_r+0xd8>)
 8003c78:	429c      	cmp	r4, r3
 8003c7a:	bf08      	it	eq
 8003c7c:	68ec      	ldreq	r4, [r5, #12]
 8003c7e:	e7e6      	b.n	8003c4e <__swsetup_r+0x1e>
 8003c80:	0758      	lsls	r0, r3, #29
 8003c82:	d512      	bpl.n	8003caa <__swsetup_r+0x7a>
 8003c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c86:	b141      	cbz	r1, 8003c9a <__swsetup_r+0x6a>
 8003c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c8c:	4299      	cmp	r1, r3
 8003c8e:	d002      	beq.n	8003c96 <__swsetup_r+0x66>
 8003c90:	4630      	mov	r0, r6
 8003c92:	f000 f991 	bl	8003fb8 <_free_r>
 8003c96:	2300      	movs	r3, #0
 8003c98:	6363      	str	r3, [r4, #52]	; 0x34
 8003c9a:	89a3      	ldrh	r3, [r4, #12]
 8003c9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ca0:	81a3      	strh	r3, [r4, #12]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	6063      	str	r3, [r4, #4]
 8003ca6:	6923      	ldr	r3, [r4, #16]
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	89a3      	ldrh	r3, [r4, #12]
 8003cac:	f043 0308 	orr.w	r3, r3, #8
 8003cb0:	81a3      	strh	r3, [r4, #12]
 8003cb2:	6923      	ldr	r3, [r4, #16]
 8003cb4:	b94b      	cbnz	r3, 8003cca <__swsetup_r+0x9a>
 8003cb6:	89a3      	ldrh	r3, [r4, #12]
 8003cb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc0:	d003      	beq.n	8003cca <__swsetup_r+0x9a>
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	f000 f92b 	bl	8003f20 <__smakebuf_r>
 8003cca:	89a0      	ldrh	r0, [r4, #12]
 8003ccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003cd0:	f010 0301 	ands.w	r3, r0, #1
 8003cd4:	d00a      	beq.n	8003cec <__swsetup_r+0xbc>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60a3      	str	r3, [r4, #8]
 8003cda:	6963      	ldr	r3, [r4, #20]
 8003cdc:	425b      	negs	r3, r3
 8003cde:	61a3      	str	r3, [r4, #24]
 8003ce0:	6923      	ldr	r3, [r4, #16]
 8003ce2:	b943      	cbnz	r3, 8003cf6 <__swsetup_r+0xc6>
 8003ce4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ce8:	d1ba      	bne.n	8003c60 <__swsetup_r+0x30>
 8003cea:	bd70      	pop	{r4, r5, r6, pc}
 8003cec:	0781      	lsls	r1, r0, #30
 8003cee:	bf58      	it	pl
 8003cf0:	6963      	ldrpl	r3, [r4, #20]
 8003cf2:	60a3      	str	r3, [r4, #8]
 8003cf4:	e7f4      	b.n	8003ce0 <__swsetup_r+0xb0>
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	e7f7      	b.n	8003cea <__swsetup_r+0xba>
 8003cfa:	bf00      	nop
 8003cfc:	2000000c 	.word	0x2000000c
 8003d00:	08004118 	.word	0x08004118
 8003d04:	08004138 	.word	0x08004138
 8003d08:	080040f8 	.word	0x080040f8

08003d0c <_close_r>:
 8003d0c:	b538      	push	{r3, r4, r5, lr}
 8003d0e:	4d06      	ldr	r5, [pc, #24]	; (8003d28 <_close_r+0x1c>)
 8003d10:	2300      	movs	r3, #0
 8003d12:	4604      	mov	r4, r0
 8003d14:	4608      	mov	r0, r1
 8003d16:	602b      	str	r3, [r5, #0]
 8003d18:	f7fc ff73 	bl	8000c02 <_close>
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	d102      	bne.n	8003d26 <_close_r+0x1a>
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	b103      	cbz	r3, 8003d26 <_close_r+0x1a>
 8003d24:	6023      	str	r3, [r4, #0]
 8003d26:	bd38      	pop	{r3, r4, r5, pc}
 8003d28:	20000148 	.word	0x20000148

08003d2c <__sflush_r>:
 8003d2c:	898a      	ldrh	r2, [r1, #12]
 8003d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d32:	4605      	mov	r5, r0
 8003d34:	0710      	lsls	r0, r2, #28
 8003d36:	460c      	mov	r4, r1
 8003d38:	d458      	bmi.n	8003dec <__sflush_r+0xc0>
 8003d3a:	684b      	ldr	r3, [r1, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	dc05      	bgt.n	8003d4c <__sflush_r+0x20>
 8003d40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	dc02      	bgt.n	8003d4c <__sflush_r+0x20>
 8003d46:	2000      	movs	r0, #0
 8003d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d4e:	2e00      	cmp	r6, #0
 8003d50:	d0f9      	beq.n	8003d46 <__sflush_r+0x1a>
 8003d52:	2300      	movs	r3, #0
 8003d54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d58:	682f      	ldr	r7, [r5, #0]
 8003d5a:	602b      	str	r3, [r5, #0]
 8003d5c:	d032      	beq.n	8003dc4 <__sflush_r+0x98>
 8003d5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d60:	89a3      	ldrh	r3, [r4, #12]
 8003d62:	075a      	lsls	r2, r3, #29
 8003d64:	d505      	bpl.n	8003d72 <__sflush_r+0x46>
 8003d66:	6863      	ldr	r3, [r4, #4]
 8003d68:	1ac0      	subs	r0, r0, r3
 8003d6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d6c:	b10b      	cbz	r3, 8003d72 <__sflush_r+0x46>
 8003d6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d70:	1ac0      	subs	r0, r0, r3
 8003d72:	2300      	movs	r3, #0
 8003d74:	4602      	mov	r2, r0
 8003d76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d78:	6a21      	ldr	r1, [r4, #32]
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	47b0      	blx	r6
 8003d7e:	1c43      	adds	r3, r0, #1
 8003d80:	89a3      	ldrh	r3, [r4, #12]
 8003d82:	d106      	bne.n	8003d92 <__sflush_r+0x66>
 8003d84:	6829      	ldr	r1, [r5, #0]
 8003d86:	291d      	cmp	r1, #29
 8003d88:	d82c      	bhi.n	8003de4 <__sflush_r+0xb8>
 8003d8a:	4a2a      	ldr	r2, [pc, #168]	; (8003e34 <__sflush_r+0x108>)
 8003d8c:	40ca      	lsrs	r2, r1
 8003d8e:	07d6      	lsls	r6, r2, #31
 8003d90:	d528      	bpl.n	8003de4 <__sflush_r+0xb8>
 8003d92:	2200      	movs	r2, #0
 8003d94:	6062      	str	r2, [r4, #4]
 8003d96:	04d9      	lsls	r1, r3, #19
 8003d98:	6922      	ldr	r2, [r4, #16]
 8003d9a:	6022      	str	r2, [r4, #0]
 8003d9c:	d504      	bpl.n	8003da8 <__sflush_r+0x7c>
 8003d9e:	1c42      	adds	r2, r0, #1
 8003da0:	d101      	bne.n	8003da6 <__sflush_r+0x7a>
 8003da2:	682b      	ldr	r3, [r5, #0]
 8003da4:	b903      	cbnz	r3, 8003da8 <__sflush_r+0x7c>
 8003da6:	6560      	str	r0, [r4, #84]	; 0x54
 8003da8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003daa:	602f      	str	r7, [r5, #0]
 8003dac:	2900      	cmp	r1, #0
 8003dae:	d0ca      	beq.n	8003d46 <__sflush_r+0x1a>
 8003db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003db4:	4299      	cmp	r1, r3
 8003db6:	d002      	beq.n	8003dbe <__sflush_r+0x92>
 8003db8:	4628      	mov	r0, r5
 8003dba:	f000 f8fd 	bl	8003fb8 <_free_r>
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	6360      	str	r0, [r4, #52]	; 0x34
 8003dc2:	e7c1      	b.n	8003d48 <__sflush_r+0x1c>
 8003dc4:	6a21      	ldr	r1, [r4, #32]
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	4628      	mov	r0, r5
 8003dca:	47b0      	blx	r6
 8003dcc:	1c41      	adds	r1, r0, #1
 8003dce:	d1c7      	bne.n	8003d60 <__sflush_r+0x34>
 8003dd0:	682b      	ldr	r3, [r5, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0c4      	beq.n	8003d60 <__sflush_r+0x34>
 8003dd6:	2b1d      	cmp	r3, #29
 8003dd8:	d001      	beq.n	8003dde <__sflush_r+0xb2>
 8003dda:	2b16      	cmp	r3, #22
 8003ddc:	d101      	bne.n	8003de2 <__sflush_r+0xb6>
 8003dde:	602f      	str	r7, [r5, #0]
 8003de0:	e7b1      	b.n	8003d46 <__sflush_r+0x1a>
 8003de2:	89a3      	ldrh	r3, [r4, #12]
 8003de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003de8:	81a3      	strh	r3, [r4, #12]
 8003dea:	e7ad      	b.n	8003d48 <__sflush_r+0x1c>
 8003dec:	690f      	ldr	r7, [r1, #16]
 8003dee:	2f00      	cmp	r7, #0
 8003df0:	d0a9      	beq.n	8003d46 <__sflush_r+0x1a>
 8003df2:	0793      	lsls	r3, r2, #30
 8003df4:	680e      	ldr	r6, [r1, #0]
 8003df6:	bf08      	it	eq
 8003df8:	694b      	ldreq	r3, [r1, #20]
 8003dfa:	600f      	str	r7, [r1, #0]
 8003dfc:	bf18      	it	ne
 8003dfe:	2300      	movne	r3, #0
 8003e00:	eba6 0807 	sub.w	r8, r6, r7
 8003e04:	608b      	str	r3, [r1, #8]
 8003e06:	f1b8 0f00 	cmp.w	r8, #0
 8003e0a:	dd9c      	ble.n	8003d46 <__sflush_r+0x1a>
 8003e0c:	6a21      	ldr	r1, [r4, #32]
 8003e0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e10:	4643      	mov	r3, r8
 8003e12:	463a      	mov	r2, r7
 8003e14:	4628      	mov	r0, r5
 8003e16:	47b0      	blx	r6
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	dc06      	bgt.n	8003e2a <__sflush_r+0xfe>
 8003e1c:	89a3      	ldrh	r3, [r4, #12]
 8003e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e22:	81a3      	strh	r3, [r4, #12]
 8003e24:	f04f 30ff 	mov.w	r0, #4294967295
 8003e28:	e78e      	b.n	8003d48 <__sflush_r+0x1c>
 8003e2a:	4407      	add	r7, r0
 8003e2c:	eba8 0800 	sub.w	r8, r8, r0
 8003e30:	e7e9      	b.n	8003e06 <__sflush_r+0xda>
 8003e32:	bf00      	nop
 8003e34:	20400001 	.word	0x20400001

08003e38 <_fflush_r>:
 8003e38:	b538      	push	{r3, r4, r5, lr}
 8003e3a:	690b      	ldr	r3, [r1, #16]
 8003e3c:	4605      	mov	r5, r0
 8003e3e:	460c      	mov	r4, r1
 8003e40:	b913      	cbnz	r3, 8003e48 <_fflush_r+0x10>
 8003e42:	2500      	movs	r5, #0
 8003e44:	4628      	mov	r0, r5
 8003e46:	bd38      	pop	{r3, r4, r5, pc}
 8003e48:	b118      	cbz	r0, 8003e52 <_fflush_r+0x1a>
 8003e4a:	6983      	ldr	r3, [r0, #24]
 8003e4c:	b90b      	cbnz	r3, 8003e52 <_fflush_r+0x1a>
 8003e4e:	f7ff fa15 	bl	800327c <__sinit>
 8003e52:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <_fflush_r+0x6c>)
 8003e54:	429c      	cmp	r4, r3
 8003e56:	d11b      	bne.n	8003e90 <_fflush_r+0x58>
 8003e58:	686c      	ldr	r4, [r5, #4]
 8003e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0ef      	beq.n	8003e42 <_fflush_r+0xa>
 8003e62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e64:	07d0      	lsls	r0, r2, #31
 8003e66:	d404      	bmi.n	8003e72 <_fflush_r+0x3a>
 8003e68:	0599      	lsls	r1, r3, #22
 8003e6a:	d402      	bmi.n	8003e72 <_fflush_r+0x3a>
 8003e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e6e:	f7ff faa3 	bl	80033b8 <__retarget_lock_acquire_recursive>
 8003e72:	4628      	mov	r0, r5
 8003e74:	4621      	mov	r1, r4
 8003e76:	f7ff ff59 	bl	8003d2c <__sflush_r>
 8003e7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e7c:	07da      	lsls	r2, r3, #31
 8003e7e:	4605      	mov	r5, r0
 8003e80:	d4e0      	bmi.n	8003e44 <_fflush_r+0xc>
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	059b      	lsls	r3, r3, #22
 8003e86:	d4dd      	bmi.n	8003e44 <_fflush_r+0xc>
 8003e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e8a:	f7ff fa96 	bl	80033ba <__retarget_lock_release_recursive>
 8003e8e:	e7d9      	b.n	8003e44 <_fflush_r+0xc>
 8003e90:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <_fflush_r+0x70>)
 8003e92:	429c      	cmp	r4, r3
 8003e94:	d101      	bne.n	8003e9a <_fflush_r+0x62>
 8003e96:	68ac      	ldr	r4, [r5, #8]
 8003e98:	e7df      	b.n	8003e5a <_fflush_r+0x22>
 8003e9a:	4b04      	ldr	r3, [pc, #16]	; (8003eac <_fflush_r+0x74>)
 8003e9c:	429c      	cmp	r4, r3
 8003e9e:	bf08      	it	eq
 8003ea0:	68ec      	ldreq	r4, [r5, #12]
 8003ea2:	e7da      	b.n	8003e5a <_fflush_r+0x22>
 8003ea4:	08004118 	.word	0x08004118
 8003ea8:	08004138 	.word	0x08004138
 8003eac:	080040f8 	.word	0x080040f8

08003eb0 <_lseek_r>:
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	4d07      	ldr	r5, [pc, #28]	; (8003ed0 <_lseek_r+0x20>)
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	4608      	mov	r0, r1
 8003eb8:	4611      	mov	r1, r2
 8003eba:	2200      	movs	r2, #0
 8003ebc:	602a      	str	r2, [r5, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f7fc fec6 	bl	8000c50 <_lseek>
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	d102      	bne.n	8003ece <_lseek_r+0x1e>
 8003ec8:	682b      	ldr	r3, [r5, #0]
 8003eca:	b103      	cbz	r3, 8003ece <_lseek_r+0x1e>
 8003ecc:	6023      	str	r3, [r4, #0]
 8003ece:	bd38      	pop	{r3, r4, r5, pc}
 8003ed0:	20000148 	.word	0x20000148

08003ed4 <__swhatbuf_r>:
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	460e      	mov	r6, r1
 8003ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003edc:	2900      	cmp	r1, #0
 8003ede:	b096      	sub	sp, #88	; 0x58
 8003ee0:	4614      	mov	r4, r2
 8003ee2:	461d      	mov	r5, r3
 8003ee4:	da08      	bge.n	8003ef8 <__swhatbuf_r+0x24>
 8003ee6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	602a      	str	r2, [r5, #0]
 8003eee:	061a      	lsls	r2, r3, #24
 8003ef0:	d410      	bmi.n	8003f14 <__swhatbuf_r+0x40>
 8003ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ef6:	e00e      	b.n	8003f16 <__swhatbuf_r+0x42>
 8003ef8:	466a      	mov	r2, sp
 8003efa:	f000 f8bb 	bl	8004074 <_fstat_r>
 8003efe:	2800      	cmp	r0, #0
 8003f00:	dbf1      	blt.n	8003ee6 <__swhatbuf_r+0x12>
 8003f02:	9a01      	ldr	r2, [sp, #4]
 8003f04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f0c:	425a      	negs	r2, r3
 8003f0e:	415a      	adcs	r2, r3
 8003f10:	602a      	str	r2, [r5, #0]
 8003f12:	e7ee      	b.n	8003ef2 <__swhatbuf_r+0x1e>
 8003f14:	2340      	movs	r3, #64	; 0x40
 8003f16:	2000      	movs	r0, #0
 8003f18:	6023      	str	r3, [r4, #0]
 8003f1a:	b016      	add	sp, #88	; 0x58
 8003f1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f20 <__smakebuf_r>:
 8003f20:	898b      	ldrh	r3, [r1, #12]
 8003f22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f24:	079d      	lsls	r5, r3, #30
 8003f26:	4606      	mov	r6, r0
 8003f28:	460c      	mov	r4, r1
 8003f2a:	d507      	bpl.n	8003f3c <__smakebuf_r+0x1c>
 8003f2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	6123      	str	r3, [r4, #16]
 8003f34:	2301      	movs	r3, #1
 8003f36:	6163      	str	r3, [r4, #20]
 8003f38:	b002      	add	sp, #8
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
 8003f3c:	ab01      	add	r3, sp, #4
 8003f3e:	466a      	mov	r2, sp
 8003f40:	f7ff ffc8 	bl	8003ed4 <__swhatbuf_r>
 8003f44:	9900      	ldr	r1, [sp, #0]
 8003f46:	4605      	mov	r5, r0
 8003f48:	4630      	mov	r0, r6
 8003f4a:	f7ff fa57 	bl	80033fc <_malloc_r>
 8003f4e:	b948      	cbnz	r0, 8003f64 <__smakebuf_r+0x44>
 8003f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f54:	059a      	lsls	r2, r3, #22
 8003f56:	d4ef      	bmi.n	8003f38 <__smakebuf_r+0x18>
 8003f58:	f023 0303 	bic.w	r3, r3, #3
 8003f5c:	f043 0302 	orr.w	r3, r3, #2
 8003f60:	81a3      	strh	r3, [r4, #12]
 8003f62:	e7e3      	b.n	8003f2c <__smakebuf_r+0xc>
 8003f64:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <__smakebuf_r+0x7c>)
 8003f66:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	6020      	str	r0, [r4, #0]
 8003f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f70:	81a3      	strh	r3, [r4, #12]
 8003f72:	9b00      	ldr	r3, [sp, #0]
 8003f74:	6163      	str	r3, [r4, #20]
 8003f76:	9b01      	ldr	r3, [sp, #4]
 8003f78:	6120      	str	r0, [r4, #16]
 8003f7a:	b15b      	cbz	r3, 8003f94 <__smakebuf_r+0x74>
 8003f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f80:	4630      	mov	r0, r6
 8003f82:	f000 f889 	bl	8004098 <_isatty_r>
 8003f86:	b128      	cbz	r0, 8003f94 <__smakebuf_r+0x74>
 8003f88:	89a3      	ldrh	r3, [r4, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	81a3      	strh	r3, [r4, #12]
 8003f94:	89a0      	ldrh	r0, [r4, #12]
 8003f96:	4305      	orrs	r5, r0
 8003f98:	81a5      	strh	r5, [r4, #12]
 8003f9a:	e7cd      	b.n	8003f38 <__smakebuf_r+0x18>
 8003f9c:	08003215 	.word	0x08003215

08003fa0 <__malloc_lock>:
 8003fa0:	4801      	ldr	r0, [pc, #4]	; (8003fa8 <__malloc_lock+0x8>)
 8003fa2:	f7ff ba09 	b.w	80033b8 <__retarget_lock_acquire_recursive>
 8003fa6:	bf00      	nop
 8003fa8:	2000013c 	.word	0x2000013c

08003fac <__malloc_unlock>:
 8003fac:	4801      	ldr	r0, [pc, #4]	; (8003fb4 <__malloc_unlock+0x8>)
 8003fae:	f7ff ba04 	b.w	80033ba <__retarget_lock_release_recursive>
 8003fb2:	bf00      	nop
 8003fb4:	2000013c 	.word	0x2000013c

08003fb8 <_free_r>:
 8003fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fba:	2900      	cmp	r1, #0
 8003fbc:	d044      	beq.n	8004048 <_free_r+0x90>
 8003fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fc2:	9001      	str	r0, [sp, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8003fca:	bfb8      	it	lt
 8003fcc:	18e4      	addlt	r4, r4, r3
 8003fce:	f7ff ffe7 	bl	8003fa0 <__malloc_lock>
 8003fd2:	4a1e      	ldr	r2, [pc, #120]	; (800404c <_free_r+0x94>)
 8003fd4:	9801      	ldr	r0, [sp, #4]
 8003fd6:	6813      	ldr	r3, [r2, #0]
 8003fd8:	b933      	cbnz	r3, 8003fe8 <_free_r+0x30>
 8003fda:	6063      	str	r3, [r4, #4]
 8003fdc:	6014      	str	r4, [r2, #0]
 8003fde:	b003      	add	sp, #12
 8003fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fe4:	f7ff bfe2 	b.w	8003fac <__malloc_unlock>
 8003fe8:	42a3      	cmp	r3, r4
 8003fea:	d908      	bls.n	8003ffe <_free_r+0x46>
 8003fec:	6825      	ldr	r5, [r4, #0]
 8003fee:	1961      	adds	r1, r4, r5
 8003ff0:	428b      	cmp	r3, r1
 8003ff2:	bf01      	itttt	eq
 8003ff4:	6819      	ldreq	r1, [r3, #0]
 8003ff6:	685b      	ldreq	r3, [r3, #4]
 8003ff8:	1949      	addeq	r1, r1, r5
 8003ffa:	6021      	streq	r1, [r4, #0]
 8003ffc:	e7ed      	b.n	8003fda <_free_r+0x22>
 8003ffe:	461a      	mov	r2, r3
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	b10b      	cbz	r3, 8004008 <_free_r+0x50>
 8004004:	42a3      	cmp	r3, r4
 8004006:	d9fa      	bls.n	8003ffe <_free_r+0x46>
 8004008:	6811      	ldr	r1, [r2, #0]
 800400a:	1855      	adds	r5, r2, r1
 800400c:	42a5      	cmp	r5, r4
 800400e:	d10b      	bne.n	8004028 <_free_r+0x70>
 8004010:	6824      	ldr	r4, [r4, #0]
 8004012:	4421      	add	r1, r4
 8004014:	1854      	adds	r4, r2, r1
 8004016:	42a3      	cmp	r3, r4
 8004018:	6011      	str	r1, [r2, #0]
 800401a:	d1e0      	bne.n	8003fde <_free_r+0x26>
 800401c:	681c      	ldr	r4, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	6053      	str	r3, [r2, #4]
 8004022:	4421      	add	r1, r4
 8004024:	6011      	str	r1, [r2, #0]
 8004026:	e7da      	b.n	8003fde <_free_r+0x26>
 8004028:	d902      	bls.n	8004030 <_free_r+0x78>
 800402a:	230c      	movs	r3, #12
 800402c:	6003      	str	r3, [r0, #0]
 800402e:	e7d6      	b.n	8003fde <_free_r+0x26>
 8004030:	6825      	ldr	r5, [r4, #0]
 8004032:	1961      	adds	r1, r4, r5
 8004034:	428b      	cmp	r3, r1
 8004036:	bf04      	itt	eq
 8004038:	6819      	ldreq	r1, [r3, #0]
 800403a:	685b      	ldreq	r3, [r3, #4]
 800403c:	6063      	str	r3, [r4, #4]
 800403e:	bf04      	itt	eq
 8004040:	1949      	addeq	r1, r1, r5
 8004042:	6021      	streq	r1, [r4, #0]
 8004044:	6054      	str	r4, [r2, #4]
 8004046:	e7ca      	b.n	8003fde <_free_r+0x26>
 8004048:	b003      	add	sp, #12
 800404a:	bd30      	pop	{r4, r5, pc}
 800404c:	20000140 	.word	0x20000140

08004050 <_read_r>:
 8004050:	b538      	push	{r3, r4, r5, lr}
 8004052:	4d07      	ldr	r5, [pc, #28]	; (8004070 <_read_r+0x20>)
 8004054:	4604      	mov	r4, r0
 8004056:	4608      	mov	r0, r1
 8004058:	4611      	mov	r1, r2
 800405a:	2200      	movs	r2, #0
 800405c:	602a      	str	r2, [r5, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	f7fc fdb2 	bl	8000bc8 <_read>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d102      	bne.n	800406e <_read_r+0x1e>
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	b103      	cbz	r3, 800406e <_read_r+0x1e>
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	20000148 	.word	0x20000148

08004074 <_fstat_r>:
 8004074:	b538      	push	{r3, r4, r5, lr}
 8004076:	4d07      	ldr	r5, [pc, #28]	; (8004094 <_fstat_r+0x20>)
 8004078:	2300      	movs	r3, #0
 800407a:	4604      	mov	r4, r0
 800407c:	4608      	mov	r0, r1
 800407e:	4611      	mov	r1, r2
 8004080:	602b      	str	r3, [r5, #0]
 8004082:	f7fc fdca 	bl	8000c1a <_fstat>
 8004086:	1c43      	adds	r3, r0, #1
 8004088:	d102      	bne.n	8004090 <_fstat_r+0x1c>
 800408a:	682b      	ldr	r3, [r5, #0]
 800408c:	b103      	cbz	r3, 8004090 <_fstat_r+0x1c>
 800408e:	6023      	str	r3, [r4, #0]
 8004090:	bd38      	pop	{r3, r4, r5, pc}
 8004092:	bf00      	nop
 8004094:	20000148 	.word	0x20000148

08004098 <_isatty_r>:
 8004098:	b538      	push	{r3, r4, r5, lr}
 800409a:	4d06      	ldr	r5, [pc, #24]	; (80040b4 <_isatty_r+0x1c>)
 800409c:	2300      	movs	r3, #0
 800409e:	4604      	mov	r4, r0
 80040a0:	4608      	mov	r0, r1
 80040a2:	602b      	str	r3, [r5, #0]
 80040a4:	f7fc fdc9 	bl	8000c3a <_isatty>
 80040a8:	1c43      	adds	r3, r0, #1
 80040aa:	d102      	bne.n	80040b2 <_isatty_r+0x1a>
 80040ac:	682b      	ldr	r3, [r5, #0]
 80040ae:	b103      	cbz	r3, 80040b2 <_isatty_r+0x1a>
 80040b0:	6023      	str	r3, [r4, #0]
 80040b2:	bd38      	pop	{r3, r4, r5, pc}
 80040b4:	20000148 	.word	0x20000148

080040b8 <_init>:
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ba:	bf00      	nop
 80040bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040be:	bc08      	pop	{r3}
 80040c0:	469e      	mov	lr, r3
 80040c2:	4770      	bx	lr

080040c4 <_fini>:
 80040c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c6:	bf00      	nop
 80040c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ca:	bc08      	pop	{r3}
 80040cc:	469e      	mov	lr, r3
 80040ce:	4770      	bx	lr
